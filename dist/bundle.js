!function(r){var n={};function e(o){if(n[o])return n[o].exports;var t=n[o]={i:o,l:!1,exports:{}};return r[o].call(t.exports,t,t.exports,e),t.l=!0,t.exports}e.m=r,e.c=n,e.d=function(r,n,o){e.o(r,n)||Object.defineProperty(r,n,{enumerable:!0,get:o})},e.r=function(r){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(r,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(r,"__esModule",{value:!0})},e.t=function(r,n){if(1&n&&(r=e(r)),8&n)return r;if(4&n&&"object"==typeof r&&r&&r.__esModule)return r;var o=Object.create(null);if(e.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:r}),2&n&&"string"!=typeof r)for(var t in r)e.d(o,t,function(n){return r[n]}.bind(null,t));return o},e.n=function(r){var n=r&&r.__esModule?function(){return r.default}:function(){return r};return e.d(n,"a",n),n},e.o=function(r,n){return Object.prototype.hasOwnProperty.call(r,n)},e.p="",e(e.s=13)}([function(r,n,e){"use strict";e.r(n),n.default="#version 300 es\n\ninvariant gl_Position;\nin vec2 vert2d;\n\nvoid main(void) { gl_Position = vec4(vert2d, 0, 1); }\n"},function(r,n,e){"use strict";e.r(n),n.default="#version 300 es\r\nprecision highp float;\r\nprecision highp int;\r\nprecision mediump sampler3D;\r\n\r\nuniform vec3 iResolution;\r\nuniform float iTime;\r\nuniform float iFrame;\r\nuniform sampler2D iChannel0;  // first pass\r\nuniform sampler2D iPrevPass;\r\nuniform sampler2D iTextTexture;\r\n\r\nuniform float gCameraFov;      // 37 0 180 camera\r\nuniform float gCameraEyeX;     // 0\r\nuniform float gCameraEyeY;     // 3.5\r\nuniform float gCameraEyeZ;     // -2\r\nuniform float gCameraTargetX;  // 0\r\nuniform float gCameraTargetY;  // 2\r\nuniform float gCameraTargetZ;  // 0\r\nuniform float gCameraDebug;    // 0 0 1\r\n\r\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord);\r\n\r\nout vec4 outColor;\r\nvoid main(void) {\r\n    vec4 c;\r\n    mainImage(c, gl_FragCoord.xy);\r\n    outColor = c;\r\n}\r\n\r\nvec3 tap4(sampler2D tex, vec2 uv, vec2 texelSize) {\r\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\r\n\r\n    vec3 s;\r\n    s = texture(tex, uv + d.xy).rgb;\r\n    s += texture(tex, uv + d.zy).rgb;\r\n    s += texture(tex, uv + d.xw).rgb;\r\n    s += texture(tex, uv + d.zw).rgb;\r\n\r\n    return s * (1.0 / 4.0);\r\n}\r\n\r\n#define TEXT_TEX_HEIGHT 8096.0\r\n\r\nvec2 textUv(vec2 uv, float id, vec2 p, float scale) {\r\n    uv -= p;\r\n    uv /= scale;\r\n\r\n    float offset = 128.0 / TEXT_TEX_HEIGHT;\r\n    float aspect = 2048.0 / TEXT_TEX_HEIGHT;\r\n    uv.x = 0.5 + 0.5 * uv.x;\r\n    uv.y = 0.5 - 0.5 * (aspect * uv.y + 1.0 - offset);\r\n    uv.y = clamp(uv.y + offset * id, offset * id, offset * (id + 1.0));\r\n\r\n    return uv;\r\n}\r\n\r\nconst float PI = 3.14159265359;\r\nconst float TAU = 6.28318530718;\r\n#define saturate(x) clamp(x, 0., 1.)\r\n#define tri(x) (1. - 4. * abs(fract(x) - .5))\r\n#define phase(x) (floor(x) + .5 + .5 * cos(TAU * .5 * exp(-5. * fract(x))))\r\nvoid rot(inout vec2 p, float a) { p *= mat2(cos(a), sin(a), -sin(a), cos(a)); }\r\n\r\nvec2 pmod(vec2 p, float s, out float id) {\r\n    float a = PI / s - atan(p.x, p.y);\r\n    float n = TAU / s;\r\n    id = floor(a / n);\r\n    a = id * n;\r\n    rot(p, a);\r\n    return p;\r\n}\r\n\r\nfloat clamp2(float x, float min, float max) { return (min < max) ? clamp(x, min, max) : clamp(x, max, min); }\r\nfloat remap(float val, float im, float ix, float om, float ox) { return clamp2(om + (val - im) * (ox - om) / (ix - im), om, ox); }\r\nfloat remapFrom(float val, float im, float ix) { return remap(val, im, ix, 0.0, 1.0); }  // TODO: optimize\r\nfloat remapTo(float val, float om, float ox) { return remap(val, 0.0, 1.0, om, ox); }    // TODO: optimize\r\nfloat easeInOutCubic(float t) { return t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0; }\r\n\r\n#define ZERO (min(int(iFrame), 0))\r\n\r\n// Hash without Sine by David Hoskins.\r\n// https://www.shadertoy.com/view/4djSRW\r\nfloat hash11(float p) {\r\n    p = fract(p * .1031);\r\n    p *= p + 33.33;\r\n    p *= p + p;\r\n    return fract(p);\r\n}\r\n\r\nfloat hash12(vec2 p) {\r\n    vec3 p3 = fract(vec3(p.xyx) * .1031);\r\n    p3 += dot(p3, p3.yzx + 33.33);\r\n    return fract((p3.x + p3.y) * p3.z);\r\n}\r\n\r\nvec3 hash31(float p) {\r\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\r\n    p3 += dot(p3, p3.yzx + 33.33);\r\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\r\n}\r\n\r\nvec2 hash22(vec2 p) {\r\n    vec3 p3 = fract(vec3(p.xyx) * vec3(.1031, .1030, .0973));\r\n    p3 += dot(p3, p3.yzx + 33.33);\r\n    return fract((p3.xx + p3.yz) * p3.zy);\r\n}\r\n\r\nvec2 hash23(vec3 p3) {\r\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\r\n    p3 += dot(p3, p3.yzx + 33.33);\r\n    return fract((p3.xx + p3.yz) * p3.zy);\r\n}\r\n\r\nfloat noise(vec3 x) {\r\n    vec3 p = floor(x);\r\n    vec3 f = fract(x);\r\n\r\n    f = f * f * (3.0 - 2.0 * f);\r\n\r\n    float n = p.x + p.y * 57.0 + 113.0 * p.z;\r\n\r\n    float res = mix(mix(mix(hash11(n + 0.0), hash11(n + 1.0), f.x), mix(hash11(n + 57.0), hash11(n + 58.0), f.x), f.y),\r\n                    mix(mix(hash11(n + 113.0), hash11(n + 114.0), f.x), mix(hash11(n + 170.0), hash11(n + 171.0), f.x), f.y), f.z);\r\n    return res;\r\n}\r\n\r\nfloat voronoi(vec2 uv) {\r\n    vec2 i = floor(uv);\r\n    vec2 f = fract(uv);\r\n    vec2 res = vec2(8, 8);\r\n\r\n    for (int x = -1; x <= 1; x++) {\r\n        for (int y = -1; y <= 1; y++) {\r\n            vec2 n = vec2(x, y);\r\n            vec2 np = hash22(i + n);\r\n            vec2 p = n + np - f;\r\n\r\n            // マンハッタン距離\r\n            // float d = abs(p.x) + abs(p.y);\r\n            float d = length(p);\r\n            // float d = lpnorm(p, -3);\r\n\r\n            if (d < res.x) {\r\n                res.y = res.x;\r\n                res.x = d;\r\n            } else if (d < res.y) {\r\n                res.y = d;\r\n            }\r\n        }\r\n    }\r\n\r\n    float c = res.y - res.x;\r\n    c = sqrt(c);\r\n    c = smoothstep(0.4, 0.0, c);\r\n    return c;\r\n}\r\n\r\nfloat fbm(vec3 p, int oct) {\r\n    float f;\r\n    f = 0.50000 * noise(p);\r\n    p = p * 2.02;\r\n    if (oct >= 2) f += 0.25000 * noise(p);\r\n    p = p * 2.23;\r\n    if (oct >= 3) f += 0.12500 * noise(p);\r\n    p = p * 2.41;\r\n    if (oct >= 4) f += 0.06250 * noise(p);\r\n    p = p * 2.62;\r\n    if (oct >= 5) f += 0.03125 * noise(p);\r\n    return f;\r\n}\r\n\r\nfloat fbmVoronoi(vec2 p) {\r\n    float f;\r\n    f = 0.50000 * voronoi(p);\r\n    p = p * 2.02;\r\n    f += 0.25000 * voronoi(p);\r\n    p = p * 2.23;\r\n    f += 0.12500 * voronoi(p);\r\n    p = p * 2.41;\r\n    f += 0.06250 * voronoi(p);\r\n    p = p * 2.62;\r\n    f += 0.03125 * voronoi(p);\r\n    return f;\r\n}\r\n\r\nuniform float gBeat;  // 0 0 364 Main\r\nuniform float gBPM;   // 0 1 200\r\n\r\n// global vars\r\nvec3 ro, target;\r\nfloat fov;\r\nfloat beat, beatTau, beatPhase;\r\n\r\nfloat depth;\r\n\r\n// シーン依存\r\nint scene_id;\r\nvec3 sundir = normalize(vec3(0.1, 0.1, -1.0));\r\nvec3 lightColorDirectional = vec3(0.9, 0.8, 1.);\r\nvec3 lightColorAmbient = 3. * vec3(0.9, 0.8, 1.);\r\n\r\nvec3 boss_pos;\r\nvec3 gurdian_pos;\r\n\r\n// Timeline\r\nfloat prevEndTime = 0., t = 0.;\r\n#define TL(end) if (t = beat - prevEndTime, beat < (prevEndTime = end))\r\n\r\n// Materials\r\n#define M_CITY 0.\r\n#define M_GUARDIAN 1.\r\n#define M_FIGHTER 2.\r\n#define M_LAVA 3.\r\n#define M_BOSS 4.\r\n#define M_BOSS_EYE 5.\r\n#define M_EXPLOSION 6.\r\n#define M_LAZER 7.\r\n#define M_NAME 8.\r\n\r\n#define opRepLim(p, s, l) p - s* clamp(round(p / s), -l, l)\r\n\r\nvoid opU(inout vec4 m, float d, float mat_id, float param0, float param1) {\r\n    if (d < m.x) m = vec4(d, mat_id, param0, param1);\r\n}\r\n\r\nfloat opSmoothUnion(float d1, float d2, float k) {\r\n    float h = clamp(0.5 + 0.5 * (d2 - d1) / k, 0.0, 1.0);\r\n    return mix(d2, d1, h) - k * h * (1.0 - h);\r\n}\r\n\r\nfloat sdBox(vec3 p, vec3 b) {\r\n    vec3 q = abs(p) - b;\r\n    return length(max(q, 0.)) + min(max(q.x, max(q.y, q.z)), 0.);\r\n}\r\n\r\nfloat sdBox(vec2 p, vec2 b) {\r\n    vec2 q = abs(p) - b;\r\n    return length(max(q, 0.)) + min(max(q.x, q.y), 0.);\r\n}\r\n\r\nfloat sdTorus(vec3 p, vec2 t) {\r\n    vec2 q = vec2(length(p.xz) - t.x, p.y);\r\n    return length(q) - t.y;\r\n}\r\n\r\nfloat sdCappedCylinder(vec3 p, vec3 a, vec3 b, float r) {\r\n    vec3 ba = b - a;\r\n    vec3 pa = p - a;\r\n    float baba = dot(ba, ba);\r\n    float paba = dot(pa, ba);\r\n    float x = length(pa * baba - ba * paba) - r * baba;\r\n    float y = abs(paba - baba * 0.5) - baba * 0.5;\r\n    float x2 = x * x;\r\n    float y2 = y * y * baba;\r\n    float d = (max(x, y) < 0.0) ? -min(x2, y2) : (((x > 0.0) ? x2 : 0.0) + ((y > 0.0) ? y2 : 0.0));\r\n    return sign(d) * sqrt(abs(d)) / baba;\r\n}\r\n\r\nuniform float gGuardianPosX;       // 0\r\nuniform float gGuardianPosY;       // -0.5\r\nuniform float gGuardianPosZ;       // 0\r\nuniform float gGuardianIteration;  // 6\r\nuniform float gGuardianIfsRotZ;    // 0.65\r\n\r\nuniform float gGuardianChargePosZ;        // 0.13\r\nuniform float gGuardianChargeRadius;      // 0.02\r\nuniform float gGuardianChargeBrightness;  // 1\r\n\r\nuniform float gBossPosX;        // 0\r\nuniform float gBossPosY;        // 0.2\r\nuniform float gBossPosZ;        // 0\r\nuniform float gBossIfsOffsetX;  // 1.79\r\n\r\nuniform float gFighterGroupPosX;  // 0\r\nuniform float gFighterGroupPosY;  // 0.2\r\nuniform float gFighterGroupPosZ;  // -1\r\n\r\nfloat sunColor(vec3 rd) { return saturate(dot(sundir, rd)); }\r\n\r\nvec3 skyColor(vec3 rd) {\r\n    if (scene_id == 0) {\r\n        float sun = sunColor(rd);\r\n        vec3 bgcol = vec3(0.56, 0.55, 0.95);\r\n        bgcol -= 0.6 * vec3(0.90, 0.75, 0.95) * rd.y;\r\n        bgcol += 0.2 * vec3(1.00, 0.60, 0.10) * pow(sun, 8.0);\r\n        return bgcol;\r\n    } else {\r\n        return vec3(0.0, 0.0, 0.0);\r\n    }\r\n}\r\n"},function(r,n,e){"use strict";e.r(n),n.default="float DBFold(vec3 p, float fo, float g, float w) {\r\n    if (p.z > p.y) p.yz = p.zy;\r\n    float vx = p.x - 2. * fo;\r\n    float vy = p.y - 4. * fo;\r\n    float v = max(abs(vx + fo) - fo, vy);\r\n    float v1 = max(vx - g, p.y - w);\r\n    v = min(v, v1);\r\n    v1 = max(v1, -abs(p.x));\r\n    return min(v, p.x);\r\n}\r\n\r\nvec3 DBFoldParallel(vec3 p, vec3 fo, vec3 g, vec3 w) {\r\n    vec3 p1 = p;\r\n    p.x = DBFold(p1, fo.x, g.x, w.x);\r\n    p.y = DBFold(p1.yzx, fo.y, g.y, w.y);\r\n    p.z = DBFold(p1.zxy, fo.z, g.z, w.z);\r\n    return p;\r\n}\r\n\r\nvec4 orbitTrap;\r\n\r\n// https://www.shadertoy.com/view/MdV3Wz\r\nfloat dMandelBox(vec3 p, float _Scale, float _MinRad2, float _sr, vec3 _fo, vec3 _gh, vec3 _gw) {\r\n    vec4 JC = vec4(p, 1.);\r\n    float r2 = dot(p, p);\r\n    float dd = 1.;\r\n    orbitTrap = vec4(10000);\r\n\r\n    for (int i = ZERO; i < 6; i++) {\r\n        p = p - clamp(p.xyz, -1.0, 1.0) * 2.0;  // mandelbox's box fold\r\n\r\n        // Apply pull transformation\r\n        vec3 signs = sign(p);  // Save \tthe original signs\r\n        p = abs(p);\r\n        p = DBFoldParallel(p, _fo, _gh, _gw);\r\n\r\n        p *= signs;  // resore signs: this way the mandelbrot set won't extend in negative directions\r\n\r\n        // Sphere fold\r\n        r2 = dot(p, p);\r\n        float t = clamp(1. / r2, 1., 1. / _MinRad2);\r\n        p *= t;\r\n        dd *= t;\r\n\r\n        // Scale and shift\r\n        p = p * _Scale + JC.xyz;\r\n        dd = dd * _Scale + JC.w;\r\n        p = vec3(1.0, 1.0, .92) * p;\r\n\r\n        r2 = dot(p, p);\r\n        orbitTrap = min(orbitTrap, abs(vec4(p, r2)));\r\n    }\r\n\r\n    dd = abs(dd);\r\n\r\n#if 0\r\n    return (sqrt(r2) - _sr) / dd;  // bounding volume is a sphere\r\n#else\r\n    p = abs(p);\r\n    return (max(p.x, max(p.y, p.z)) - _sr) / dd;  // bounding volume is a cube\r\n#endif\r\n}\r\n\r\nvec4 mGuardian(vec3 pos, vec4 m) {\r\n    vec3 p = pos;\r\n    float scale = 0.01;\r\n    float _IFS_Iteration = gGuardianIteration;\r\n\r\n    // bounds sphere\r\n    float dist = length(p - vec3(0, 10, 0) * scale);\r\n    float _BoundsRadius = (15. + 2. * (_IFS_Iteration - 6.)) * scale;\r\n\r\n    if (dist >= _BoundsRadius + scale) {\r\n        opU(m, dist - _BoundsRadius, M_GUARDIAN, 0.0, 0.);\r\n        return m;\r\n    }\r\n\r\n    // main\r\n    p /= scale;\r\n\r\n    vec3 p0 = p;\r\n    p0.y -= 22.;\r\n    float d = sdTorus(p0, vec2(7., 0.1));\r\n    opU(m, d * scale, M_GUARDIAN, 2., 0.);\r\n\r\n    rot(p.xz, TAU / 4.);\r\n\r\n    vec3 _IFS_Rot = vec3(0.34, 0.85, gGuardianIfsRotZ);\r\n    vec3 _IFS_Offset = vec3(0.66, 9.0, 1.5);\r\n\r\n    vec3 p1 = p - _IFS_Offset;\r\n    vec3 pp1 = p1;\r\n\r\n    for (int i = ZERO; i < int(_IFS_Iteration); i++) {\r\n        pp1 = p1;\r\n        p1 = abs(p1 + _IFS_Offset.xyz) - _IFS_Offset.xyz;\r\n        rot(p1.xz, TAU * _IFS_Rot.x);\r\n        rot(p1.zy, TAU * _IFS_Rot.y);\r\n        rot(p1.xy, TAU * _IFS_Rot.z + 0.0 * sin(beatPhase * TAU / 4.9));\r\n    }\r\n\r\n    float d1 = sdBox(p1, vec3(0.5, 2, 0.5));\r\n    float d2 = sdBox(p1, vec3(0.6, 2.1, 0.1));\r\n\r\n    float dp1 = sdBox(pp1, vec3(0.5, 2, 0.5));\r\n    float dp2 = sdBox(pp1, vec3(0.6, 2.1, 0.1));\r\n\r\n    d1 = mix(dp1, d1, fract(_IFS_Iteration));\r\n    d2 = mix(dp2, d2, fract(_IFS_Iteration));\r\n\r\n    opU(m, d1 * scale, M_GUARDIAN, 0.0, 0.);\r\n\r\n    float emi = 0.;\r\n    if (beat < 320.) emi = 10. * smoothstep(258., 260., beat) * saturate(cos(beatTau * 0.25 + 100.0 * length(pos - vec3(0, 0.12, 0.3))));\r\n    opU(m, d2 * scale, M_GUARDIAN, 1.0, emi);\r\n\r\n    // 下半分をカット\r\n    m.x = max(m.x, -pos.y);\r\n\r\n    return m;\r\n}\r\n\r\nvec3 TrackPath(float t) { return vec3(4.7 * sin(t * 0.15) + 2.7 * cos(t * 0.19), 0., t); }\r\n\r\n// https://www.shadertoy.com/view/XsfBWM\r\nfloat dCave(vec3 p) {\r\n    vec3 p0 = p;\r\n\r\n    float d;\r\n    p.xy -= TrackPath(p.z).xy;\r\n    p += 0.1 * (1. - cos(2. * PI * (p + 0.2 * (1. - cos(2. * PI * p.zxy)))));\r\n    vec3 hv = cos(0.6 * p - 0.5 * sin(1.4 * p.zxy + 0.4 * cos(2.7 * p.yzx)));\r\n    d = 0.9 * (length(hv) - 1.1);\r\n\r\n    if (d < 0.1) {\r\n        d += 0.1 * fbm(p, 5);\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\nfloat dLava(vec3 p) {\r\n    float d = p.y;\r\n    p.xz -= 0.2 * (sin(p.x + 0.1 * beat) + sin(p.z + 0.1 * beat));\r\n    d += 0.01 * (sin(p.x * 2. - 0.1 * beat) + sin(2. * p.z - 0.1 * beat));\r\n    d += 0.005 * (sin(4.32 * p.x - 0.05 * beat) + sin(4.32 * p.z - 0.05 * beat));\r\n    d += 0.1 * saturate(1.0 / (0.0001 + length(p.xz)));\r\n\r\n    if (d < 0.1) {\r\n        d += 0.05 * fbmVoronoi(p.xz);\r\n    }\r\n\r\n    return d;\r\n}\r\n\r\nuniform float gBossWingSpeed;  // 1 0 10\r\nuniform float gBossEmissive;   // 2 0 10\r\n\r\nvec4 mBoss(vec3 pos, vec4 m) {\r\n    int _IFS_Iteration = 5;\r\n    vec3 _IFS_Offset = vec3(gBossIfsOffsetX, 2.42, -0.5);\r\n    float scale = 0.01;\r\n\r\n    if (scene_id == 1) {\r\n        _IFS_Iteration = 4;\r\n\r\n        if (beat < 44.) {\r\n            scale = 0.15;\r\n        } else {\r\n            float x = remapFrom(beat, 44., 60.);\r\n            scale = mix(0.2, 0.4, x);\r\n            _IFS_Offset.z = mix(-0.5, 0.0, x);\r\n        }\r\n    }\r\n\r\n    vec3 p = pos;\r\n\r\n    // bounds sphere\r\n    float dist = length(p);\r\n    float _BoundsRadius = (14. + 3. * (gBossIfsOffsetX - 1.79)) * scale;\r\n\r\n    if (dist >= _BoundsRadius + scale) {\r\n        opU(m, dist - _BoundsRadius, M_BOSS, 0., 0.);\r\n        return m;\r\n    }\r\n\r\n    // main\r\n    vec3 _IFS_Rot = vec3(0.09, 0.06, 0.44);\r\n\r\n    vec4 _EyeOffset = vec4(1.7, -4.1, 3.51, 0.95);\r\n    float _IFS_Scale = 1.36;\r\n\r\n    float d1 = 100.0;\r\n    float d2 = 100.0;\r\n    float d3 = 100.0;\r\n\r\n    p /= scale;\r\n    p -= _IFS_Offset;\r\n    float s = 1.;\r\n\r\n    for (int i = ZERO; i < _IFS_Iteration; i++) {\r\n        p = abs(p + _IFS_Offset.xyz) - _IFS_Offset.xyz;\r\n        rot(p.xz, TAU * _IFS_Rot.x);\r\n        rot(p.zy, TAU * _IFS_Rot.y);\r\n        rot(p.xy, TAU * _IFS_Rot.z + 0.05 * sin(beatTau / 4. * gBossWingSpeed));\r\n        p *= _IFS_Scale;\r\n        s *= _IFS_Scale;\r\n\r\n        d1 = opSmoothUnion(d1, sdBox(p, vec3(0.5, 2, 0.5)) / s - 0.3, 1.);\r\n        d2 = opSmoothUnion(d2, sdBox(p, vec3(0.55, 2.1, 0.1)) / s - 0.3, 1.);\r\n        if (i <= 0) d3 = min(d3, (length(p - _EyeOffset.xyz) - _EyeOffset.w) / s);\r\n    }\r\n\r\n    float emi = gBossEmissive;\r\n\r\n    if (beat >= 150. && beat < 172.)\r\n        emi *= saturate(cos(beatTau * gBossWingSpeed * 0.5 + 100.0 * length(pos)));\r\n    else if (beat >= 200. && beat < 312.)\r\n        emi *= saturate(cos(-beatTau * gBossWingSpeed * 0.5 + 100.0 * length(pos)));\r\n\r\n    opU(m, d1 * scale, M_BOSS, 0., 0.);\r\n    opU(m, d2 * scale, M_BOSS, emi, 0.);\r\n    opU(m, d3 * scale, M_BOSS_EYE, 0., 0.);\r\n\r\n    return m;\r\n}\r\n\r\nvec4 mFighter(vec3 pos, vec4 m) {\r\n    vec3 p = pos;\r\n    float scale = 0.001;\r\n\r\n    // bounds sphere\r\n    float dist = length(p);\r\n    float _BoundsRadius = 4.5 * scale;\r\n\r\n    if (dist >= _BoundsRadius + scale) {\r\n        opU(m, dist - _BoundsRadius, M_FIGHTER, 0., 0.);\r\n        return m;\r\n    }\r\n\r\n    // main\r\n    vec3 _IFS_Rot = vec3(0.38, 0.55, 0.66);\r\n    vec3 _IFS_Offset = vec3(2, 0.65, 1.38);\r\n\r\n    p /= scale;\r\n    p -= _IFS_Offset;\r\n\r\n    for (int i = ZERO; i < 2; i++) {\r\n        p = abs(p + _IFS_Offset.xyz) - _IFS_Offset.xyz;\r\n        rot(p.xz, TAU * _IFS_Rot.x);\r\n        rot(p.zy, TAU * _IFS_Rot.y);\r\n        rot(p.xy, TAU * _IFS_Rot.z);\r\n    }\r\n\r\n    float d1 = sdBox(p, vec3(0.5, 2, 0.5)) * scale;\r\n    float d2 = sdBox(p, vec3(0.6, 2.1, 0.1)) * scale;\r\n\r\n    opU(m, d1, M_FIGHTER, 0., 0.);\r\n    opU(m, d2, M_FIGHTER, 1., saturate(cos(beatTau + 1000.0 * pos.z)));\r\n\r\n    return m;\r\n}\r\n\r\nfloat explosion_displace;\r\n\r\nvec4 mExplosion(vec3 p, vec4 m, float scale, float time, float mz) {\r\n    // bounds sphere\r\n    float d = length(p) - sin(TAU * 0.5 * time) * scale;\r\n    explosion_displace = 0.;\r\n\r\n    if (d < 0.1 * scale) {\r\n        explosion_displace = fbm(p / scale * 2. + time, 5);\r\n        d += scale * explosion_displace;\r\n    }\r\n\r\n    opU(m, d, M_EXPLOSION, mz, 0.);\r\n\r\n    return m;\r\n}\r\n\r\nuniform vec3 gDoorParam;  // 0.31 0.95 0.2\r\n\r\nvec4 map(vec3 pos) {\r\n    vec4 m = vec4(999., 0., 0., 0.);\r\n    vec3 p = pos;\r\n\r\n    // ステージ\r\n    if (scene_id == 0) {\r\n        p.y += 3.55;\r\n        float d = dMandelBox(p, 4.76, 0.8, 4.0, vec3(0.7, 0.78, 0.9), vec3(0.8, 0.7, 0.5), vec3(0.3, 0.15, 0.2));\r\n\r\n        // 球体で切り取り\r\n        p = pos;\r\n        p.y -= 3.;\r\n        d = max(d, length(p) - 4.9);\r\n\r\n        // モニュメント部分を切り取り\r\n        float w = 0.17, h = 0.8;\r\n        d = max(d, -sdBox(pos, vec3(w, h, w)));\r\n        opU(m, d, M_CITY, 0., 0.);\r\n\r\n        p = pos;\r\n        p.y += 0.01;\r\n        p.x = abs(p.x);\r\n        p.x -= mix(0.51 * w, w * 1.48, easeInOutCubic(remapFrom(beat, 184., 192.0)));\r\n        d = sdBox(p, vec3(0.5 * w, 0.01, w));\r\n        float a = 0.;\r\n        if (d < 0.1) {\r\n            vec3 param = gDoorParam;\r\n            vec2 p1 = p.xz * 20. - param.xy;\r\n            for (int i = 0; i < 5; i++) {\r\n                p1 = abs(p1 + param.xy) - param.xy;\r\n                rot(p1, TAU * param.z);\r\n            }\r\n\r\n            float d1 = sdBox(p1, vec2(.4, .01));\r\n            a = step(d1, 0.1);\r\n            d += 0.003 * smoothstep(0., 0.1, d1);\r\n        }\r\n        opU(m, d, M_GUARDIAN, a, 0.);\r\n    } else if (scene_id == 1) {\r\n        float d = dLava(p);\r\n        float s = 4.;\r\n        d = opSmoothUnion(d, dCave(p / s) * s, 1.1);\r\n        opU(m, d, M_LAVA, 0., 0.);\r\n    }\r\n\r\n    // ボス\r\n    if (beat >= 36. && beat < 328. || beat >= 360.) {\r\n        p = pos - boss_pos;\r\n        if (beat < 360.) p.y -= 0.01 * sin(beatTau / 8.);\r\n        m = mBoss(p, m);\r\n    }\r\n\r\n    // 戦闘機の群れ\r\n    if (beat >= 76. && beat < 112.) {\r\n        vec3 fighter_group_pos = vec3(gFighterGroupPosX, gFighterGroupPosY, gFighterGroupPosZ);\r\n        p = pos - fighter_group_pos;\r\n\r\n        if (beat >= 92.) {\r\n            float a = 0.06;\r\n            vec3 grid = floor(p / a + 0.5);\r\n            p = opRepLim(p, a, vec3(7, 1, 4));\r\n            vec2 rnd = hash23(grid);\r\n            p.y -= 0.005 * sin(TAU * rnd.x + beatTau / 32.);\r\n        }\r\n\r\n        m = mFighter(p, m);\r\n    }\r\n\r\n    // ボスの周囲を飛び回る戦闘機\r\n    if (beat >= 112. && beat < 184.) {\r\n        p = pos - boss_pos;\r\n        rot(p.xz, beatTau / 64.);\r\n        float id;\r\n        p.xz = pmod(p.xz, 10., id);\r\n\r\n        bool isMany = beat >= 128.;\r\n\r\n        vec3 p1 = p;\r\n        p1.z -= 0.1;\r\n        float a = 0.04;\r\n        float id1 = floor(p1.y / a + 0.5);\r\n        float rnd = hash11(id + id1);\r\n        if (isMany) p1.y = opRepLim(p1.y, a, 1.);\r\n        if (beat < 170.) m = mExplosion(p1, m, 0.02, saturate(mod(rnd * 4. + beat * 0.5, 4.)), 0.8);\r\n\r\n        p.z -= 0.2 + remapFrom(beat, 168., 180.);\r\n        if (isMany) p.yz = opRepLim(p.yz, 0.1, vec2(1, 2));\r\n\r\n        // ビームで全滅\r\n        float time = saturate((beat - remapTo(rnd, 172., 175.)) / 3.);\r\n        if (time < 0.99) m = mExplosion(p, m, 0.008, time, 0.0);\r\n        if (time < 0.9) m = mFighter(p, m);\r\n    }\r\n\r\n    // ガーディアン\r\n    if (beat >= 184.) {\r\n        p = pos - gurdian_pos;\r\n        m = mGuardian(p, m);\r\n    }\r\n\r\n    return m;\r\n}\r\n\r\n// https://iquilezles.org/articles/normalsSDF\r\nvec3 calcNormal(vec3 pos, float eps) {\r\n#if 0\r\n    vec2 e = vec2(1.0, -1.0) * 0.5773 * eps;\r\n    return normalize(e.xyy * map(pos + e.xyy).x + e.yyx * map(pos + e.yyx).x + e.yxy * map(pos + e.yxy).x + e.xxx * map(pos + e.xxx).x);\r\n#else\r\n    // inspired by tdhooper and klems - a way to prevent the compiler from inlining map() 4 times\r\n    vec3 n = vec3(0.0);\r\n    for (int i = ZERO; i < 4; i++) {\r\n        vec3 e = 0.5773 * (2.0 * vec3((((i + 3) >> 1) & 1), ((i >> 1) & 1), (i & 1)) - 1.0);\r\n        n += e * map(pos + eps * e).x;\r\n        // if (n.x + n.y + n.z > 100.0) break;\r\n    }\r\n    return normalize(n);\r\n#endif\r\n}\r\n\r\n// https://iquilezles.org/articles/rmshadows\r\nfloat calcSoftshadow(vec3 ro, vec3 rd, float mint, float tmax) {\r\n    // bounding volume\r\n    float tp = (0.8 - ro.y) / rd.y;\r\n    if (tp > 0.0) tmax = min(tmax, tp);\r\n\r\n    float res = 1.0;\r\n    float t = mint;\r\n    for (int i = ZERO; i < 24; i++) {\r\n        float h = map(ro + rd * t).x;\r\n        float s = saturate(8.0 * h / t);\r\n        res = min(res, s);\r\n        t += clamp(h, 0.01, 0.2);\r\n        if (res < 0.004 || t > tmax) break;\r\n    }\r\n    res = saturate(res);\r\n    return res * res * (3.0 - 2.0 * res);\r\n}\r\n\r\n// https://iquilezles.org/articles/nvscene2008/rwwtt.pdf\r\nfloat calcAO(vec3 pos, vec3 nor) {\r\n    float occ = 0.0;\r\n    float sca = 1.0;\r\n    for (int i = ZERO; i < 5; i++) {\r\n        float h = 0.01 + 0.12 * float(i) / 4.0;\r\n        float d = map(pos + h * nor).x;\r\n        occ += (h - d) * sca;\r\n        sca *= 0.95;\r\n        if (occ > 0.35) break;\r\n    }\r\n    return clamp(1.0 - 3.0 * occ, 0.0, 1.0) * (0.5 + 0.5 * nor.y);\r\n}\r\n\r\nvec3 F_fresnelSchlick(vec3 F0, float cosTheta) { return F0 + (1.0 - F0) * pow(1.0 - cosTheta, 5.0); }\r\n\r\nfloat D_GGX(float NdotH, float roughness) {\r\n    float alpha = roughness * roughness;\r\n    float alphaSq = alpha * alpha;\r\n    float denom = (NdotH * NdotH) * (alphaSq - 1.0) + 1.0;\r\n    return alphaSq / (PI * denom * denom);\r\n}\r\n\r\nfloat schlickG1(float cosTheta, float k) { return cosTheta / (cosTheta * (1.0 - k) + k); }\r\n\r\nfloat G_schlickGGX(float NdotL, float NdotV, float roughness) {\r\n    float r = roughness + 1.0;\r\n    float k = (r * r) / 8.0;\r\n    return schlickG1(NdotL, k) * schlickG1(NdotV, k);\r\n}\r\n\r\n// https://www.shadertoy.com/view/WlffWB\r\nvec3 directLighting(vec3 pos, vec3 albedo, float metalness, float roughness, vec3 N, vec3 V, vec3 L, vec3 lightColor) {\r\n    vec3 H = normalize(L + V);\r\n    float NdotV = max(0.0, dot(N, V));\r\n    float NdotL = max(0.0, dot(N, L));\r\n    float NdotH = max(0.0, dot(N, H));\r\n    float HdotL = max(0.0, dot(H, L));\r\n\r\n    vec3 F0 = mix(vec3(0.04), albedo, metalness);\r\n\r\n    vec3 F = F_fresnelSchlick(F0, HdotL);\r\n    float D = D_GGX(NdotH, roughness);\r\n    float G = G_schlickGGX(NdotL, NdotV, roughness);\r\n    vec3 specularBRDF = (F * D * G) / max(0.0001, 4.0 * NdotL * NdotV);\r\n\r\n    vec3 kd = mix(vec3(1.0) - F, vec3(0.0), metalness);\r\n    vec3 diffuseBRDF = kd * albedo / PI;\r\n\r\n    float shadow = calcSoftshadow(pos + N * 0.1, L, 0.1, 5.);\r\n    vec3 irradiance = lightColor * NdotL * shadow;\r\n\r\n    return (diffuseBRDF + specularBRDF) * irradiance;\r\n}\r\n\r\nvec3 ambientLighting(vec3 pos, vec3 albedo, float metalness, float roughness, vec3 N, inout vec3 reflection) {\r\n    float ao = calcAO(pos, N);\r\n    float ambientReflection = step(0.95, metalness) * step(roughness, 0.05);\r\n    reflection *= albedo * ambientReflection;\r\n    return albedo * (1.0 - ambientReflection) * mix(skyColor(N), vec3(1), 0.7) * ao;\r\n}\r\n\r\nuniform float gMetalness;  // 0.5 0 1\r\nuniform float gRoughness;  // 0.5 0 1\r\n\r\nfloat inRange(float t, float a, float b) { return a <= t && t < b ? 1.0 : 0.0; }\r\n\r\nuniform float gRiberMin;             // 0.5 0 3\r\nuniform float gGreenNoiseIntensity;  // 1 0 2\r\nuniform float gGreenNoiseFreq;       // 500 0 1000\r\n\r\nuniform float gRaymarchingEps; // 0.0003\r\n\r\nvec3 raymarch(inout vec3 ro, inout vec3 rd, vec3 bgcol, inout bool hit, inout vec3 reflection) {\r\n    vec3 col = vec3(0);\r\n    vec3 p;\r\n    vec4 m;\r\n    depth = 0.;\r\n    float eps;\r\n\r\n    for (int i = ZERO; i < 200; i++) {\r\n        p = ro + rd * depth;\r\n        m = map(p);\r\n        depth += m.x;\r\n        eps = depth * gRaymarchingEps;\r\n        if (m.x < eps) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    float range = scene_id == 0 ? 4.5 : 30.;\r\n\r\n    if (sdBox(p, vec3(range)) < 0.) {\r\n        vec3 N = calcNormal(p, eps);\r\n\r\n        vec3 albedo = vec3(1, 1, 1);\r\n        vec3 emissive = vec3(0.);\r\n        float metalness = gMetalness;\r\n        float roughness = gRoughness;\r\n\r\n        if (m.y == M_CITY) {\r\n            if (p.y >= 0.0) {\r\n                if (dot(N, vec3(0, 1, 0)) > 0.5 && p.y <= 0.05) {\r\n                    // ground\r\n                    float noise = gGreenNoiseIntensity * (fbm(p * gGreenNoiseFreq, 5) - 0.5);\r\n                    float green = inRange(orbitTrap.x, gRiberMin + noise - 0.3, gRiberMin + noise + 0.6);\r\n                    albedo = mix(vec3(222, 184, 135) / 255., vec3(0.2, 0.3, 0.2), green);\r\n                    metalness = mix(0.0, 0.1, green);\r\n                    roughness = mix(0.9, 0.9, green);\r\n\r\n                    float riber = inRange(orbitTrap.x, gRiberMin, gRiberMin + 0.2);\r\n                    albedo = mix(albedo, vec3(0.7, 0.8, 1.0), riber);\r\n                    metalness = mix(metalness, 1.0, riber);\r\n                    roughness = mix(roughness, 0.0, riber);\r\n                    N = mix(N, vec3(0, 1, 0), riber);\r\n                } else if (p.y >= 0.01) {\r\n                    // buildings\r\n                    vec3 span = vec3(0.005, 0.002, 0.005);\r\n                    if (beat >= 8. && beat < 348.) span /= 4.;\r\n                    vec3 grid = floor(p / span);\r\n                    grid = mod(grid, vec3(4, 4, 4));\r\n                    float glass = step(0.5, grid.x) * step(0.5, grid.y) * step(0.5, grid.z);\r\n\r\n                    if (glass > 0.1) {\r\n                        albedo = vec3(0.1, 0.1, 0.3);\r\n                        metalness = 0.8;\r\n                        roughness = 0.1;\r\n                    } else {\r\n                        albedo = vec3(1.0);\r\n                        metalness = 0.3;\r\n                        roughness = 0.9;\r\n                    }\r\n                }\r\n            }\r\n        } else if (m.y == M_GUARDIAN) {\r\n            metalness = 0.1;\r\n            roughness = 0.7;\r\n            albedo = vec3(1.);\r\n\r\n            if (m.z == 1.) {\r\n                metalness = 1.;\r\n                roughness = 0.;\r\n                albedo = vec3(1.0, 0.85, 0.1);\r\n                emissive = vec3(0.1, 0.1, 1) * m.w;\r\n            } else if (m.z == 2.) {\r\n                // ring\r\n                emissive = vec3(1.0, 1.0, 0.6) * 2.;\r\n            }\r\n        } else if (m.y == M_FIGHTER) {\r\n            metalness = 0.1;\r\n            roughness = 0.7;\r\n            albedo = mix(vec3(0.6), vec3(0.1), m.z);\r\n            emissive = vec3(0.1, 0.3, 1.0) * m.w * 3.;\r\n        } else if (m.y == M_LAVA) {\r\n            metalness = 0.6;\r\n            roughness = 0.6;\r\n            albedo = vec3(0.6);\r\n            emissive = vec3(255, 79, 1) / 255. * 2.0 * step(p.y, mix(-0.02, 0.05, saturate((beat - 52.) / 24.)));\r\n        } else if (m.y == M_BOSS) {\r\n            metalness = 0.3;\r\n            roughness = 0.7;\r\n            albedo = vec3(0.3, 0.3, 0.3);\r\n            emissive = vec3(255, 79, 1) / 255. * m.z;\r\n        } else if (m.y == M_BOSS_EYE) {\r\n            metalness = 1.;\r\n            roughness = 0.;\r\n            albedo = vec3(255, 79, 1) / 255.;\r\n            emissive = vec3(255, 79, 1) / 255. * 0.1;\r\n        } else if (m.y == M_EXPLOSION) {\r\n            vec3 c0 = mix(vec3(3), vec3(0.3, 0.3, 3), m.z);\r\n            vec3 c1 = vec3(1, 1, 0.1);\r\n            vec3 c2 = vec3(1, 0.1, 0.1);\r\n            vec3 c3 = vec3(0.4);\r\n\r\n            float t = fract(explosion_displace * 3.);\r\n            if (explosion_displace < 0.3333) {\r\n                albedo = mix(c0, c1, t);\r\n            } else if (explosion_displace < 0.6666) {\r\n                albedo = mix(c1, c2, t);\r\n            } else {\r\n                albedo = mix(c2, c3, t);\r\n            }\r\n\r\n            emissive = albedo * 2.;\r\n        }\r\n\r\n        vec3 lightDir = sundir;\r\n        float lightAttenuation = 1.0;\r\n\r\n        if (scene_id == 1) {\r\n            vec3 lightVec = vec3(0, 3, 0) - p;\r\n            lightDir = normalize(lightVec);\r\n            // lightAttenuation /= dot(lightVec, lightVec);\r\n        }\r\n\r\n        col += directLighting(p, albedo, metalness, roughness, N, -rd, lightDir, lightColorDirectional) * lightAttenuation;\r\n\r\n        if (beat >= 184.) {\r\n            vec3 q = gurdian_pos + vec3(0, 0.22, 0) - p;\r\n            float d = length(q);\r\n            vec3 ldir = normalize(q);\r\n            col += directLighting(p, albedo, metalness, roughness, N, -rd, ldir, mix(0.02, 0.03, 0.5 + 0.5 * cos(beatTau / 8.)) * vec3(1.0, 1.0, 0.6)) / (d * d);\r\n        }\r\n\r\n        if (beat >= 264. && beat < 328.) {\r\n            vec3 q = gurdian_pos + vec3(0, 0.12, gGuardianChargePosZ) - p;\r\n            float d = length(q) - gGuardianChargeRadius;\r\n            vec3 ldir = normalize(q);\r\n            col += directLighting(p, albedo, metalness, roughness, N, -rd, ldir, 0.5 * gGuardianChargeBrightness * vec3(0.1, 0.1, 1)) / (d * d);\r\n        }\r\n\r\n        col += ambientLighting(p, albedo, metalness, roughness, N, reflection) * lightColorAmbient;\r\n        col += emissive;\r\n        hit = true;\r\n        ro = p + 0.05 * N;\r\n        rd = reflect(rd, N);\r\n    } else {\r\n        col = bgcol;\r\n        hit = false;\r\n    }\r\n\r\n    return col;\r\n}\r\n\r\nvec3 renderScene(inout vec3 ro, inout vec3 rd, vec2 px, inout bool hit, inout vec3 reflection) {\r\n    // original ray\r\n    vec3 ro0 = ro;\r\n    vec3 rd0 = rd;\r\n\r\n    // sky\r\n    vec3 bgcol = skyColor(rd0);\r\n\r\n    // opaque geometory\r\n    vec3 col = raymarch(ro, rd, bgcol, hit, reflection);\r\n\r\n    return col;\r\n}\r\n\r\nfloat depth_primary = 0.0;\r\n\r\nvec3 render(vec3 ro, vec3 rd, vec2 px) {\r\n    bool hit = false;\r\n    vec3 reflection = vec3(1);\r\n    vec3 col = vec3(0);\r\n\r\n    for (int i = ZERO; i < 2; i++) {\r\n        col += reflection * renderScene(ro, rd, px, hit, reflection);\r\n        if (i == 0) depth_primary = depth;\r\n        if (!hit || dot(reflection, reflection) < 0.01) break;\r\n    }\r\n\r\n    return col;\r\n}\r\n\r\nuniform float gMotionBlur;  // 0.3 0 1\r\n\r\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\r\n    beat = gBeat;\r\n    beatTau = beat * TAU;\r\n    beatPhase = phase(beat / 2.);\r\n\r\n    vec2 uv = fragCoord.xy / iResolution.xy;\r\n\r\n    // Camera\r\n    vec2 noise = hash23(vec3(iFrame, fragCoord)) - .5;  // AA\r\n    // noise *= 0.;\r\n    vec2 uv2 = (2. * (fragCoord.xy + noise) - iResolution.xy) / iResolution.x;\r\n\r\n    scene_id = 0;\r\n\r\n    if (beat >= 35. && beat < 60.) {\r\n        scene_id = 1;\r\n        lightColorDirectional = vec3(255, 79, 1) / 255. * 3.;\r\n        lightColorAmbient = vec3(255, 79, 1) / 255. * 0.1;\r\n    }\r\n\r\n    ro = vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ);\r\n    target = vec3(gCameraTargetX, gCameraTargetY, gCameraTargetZ);\r\n    fov = gCameraFov;\r\n\r\n    vec3 up = vec3(0, 1, 0);\r\n    vec3 fwd = normalize(target - ro);\r\n    vec3 right = normalize(cross(up, fwd));\r\n    up = normalize(cross(fwd, right));\r\n    vec3 rd = normalize(right * uv2.x + up * uv2.y + fwd / tan(fov * TAU / 720.));\r\n\r\n    boss_pos = vec3(gBossPosX, gBossPosY, gBossPosZ);\r\n    gurdian_pos = vec3(gGuardianPosX, gGuardianPosY, gGuardianPosZ);\r\n\r\n    vec3 scol = clamp(render(ro, rd, fragCoord), 0.0, 100.0);\r\n    vec3 bufa = texture(iChannel0, uv).xyz;\r\n    scol = mix(scol, bufa, gMotionBlur);\r\n    fragColor = vec4(scol, depth_primary);\r\n}\r\n"},function(r,n,e){"use strict";e.r(n),n.default="vec4 prevColor;\r\n\r\n// Hexagons - distance by iq\r\n// https://www.shadertoy.com/view/Xd2GR3\r\n// return: { 2d cell id (vec2), distance to border, distnace to center }\r\n#define INV_SQRT3 0.5773503\r\nvec4 hexagon(vec2 p) {\r\n    vec2 q = vec2(p.x * 2. * INV_SQRT3, p.y + p.x * INV_SQRT3);\r\n\r\n    vec2 pi = floor(q);\r\n    vec2 pf = fract(q);\r\n\r\n    float v = mod(pi.x + pi.y, 3.);\r\n\r\n    float ca = step(1., v);\r\n    float cb = step(2., v);\r\n    vec2 ma = step(pf.xy, pf.yx);\r\n\r\n    // distance to borders\r\n    float e = dot(ma, 1. - pf.yx + ca * (pf.x + pf.y - 1.) + cb * (pf.yx - 2. * pf.xy));\r\n\r\n    // distance to center\r\n    p = vec2(q.x + floor(.5 + p.y / 1.5), 4. * p.y / 3.) * .5 + .5;\r\n    p = (fract(p) - .5) * vec2(1., .85);\r\n    float f = length(p);\r\n\r\n    return vec4(pi + ca - cb * ma, e, f);\r\n}\r\n\r\nvec4 mapLayer0(vec3 pos) {\r\n    vec4 m = vec4(999., 0., 0., 0.);\r\n    vec3 p = pos;\r\n\r\n    // ガーディアンのレーザーのチャージ\r\n    if (beat >= 256. && beat < 324.) {\r\n        p = pos - gurdian_pos - vec3(0, 0.12, gGuardianChargePosZ);\r\n        float d = length(p) - gGuardianChargeRadius;\r\n\r\n        if (beat < 264.) {\r\n            p = abs(p);\r\n            p += beat * 0.005;\r\n            float a = 0.02;\r\n            p = mod(p, a) - 0.5 * a;\r\n            if (d < 0.05) d = min(d, length(p) - a * 0.7 * exp(-100. * d));\r\n        }\r\n        opU(m, d, M_LAZER, 1., gGuardianChargeBrightness);\r\n    }\r\n\r\n    // ガーディアンのレーザー\r\n    if (beat >= 320. && beat < 328.) {\r\n        p = pos - gurdian_pos;\r\n\r\n        float x = easeInOutCubic(remapFrom(beat, 320., 328.));\r\n        vec3 a = vec3(0, 0.12, gGuardianChargePosZ);\r\n        vec3 b = a + vec3(0, 0, 6. * x);\r\n        float d = sdCappedCylinder(p, a, b, 0.01 * x);\r\n        opU(m, d, M_LAZER, 1., 10. * x);\r\n    }\r\n\r\n    return m;\r\n}\r\n\r\nvec4 mapLayer1(vec3 pos) {\r\n    vec4 m = vec4(999., 0., 0., 0.);\r\n    vec3 p = pos;\r\n\r\n    // ボスのレーザー\r\n    if (beat >= 172. && beat < 176.) {\r\n        p = pos - boss_pos;\r\n        vec3 dir = normalize(hash31(beat) - 0.5);\r\n        dir = mix(dir, vec3(0, 0, -1), 0.3 + 0.7 * (beat - 172.) / 4.);\r\n        vec3 a = 0.1 * dir;\r\n        vec3 b = a + 3. * dir;\r\n        float d = sdCappedCylinder(p, a, b, 0.0005);\r\n        opU(m, d, M_LAZER, 0., 1.);\r\n    }\r\n\r\n    // ボスのバリア\r\n    if (beat >= 280. && beat < 328.) {\r\n        float size = 0.25 * easeInOutCubic(remapFrom(beat, 280., 296.));\r\n        p = pos - boss_pos - vec3(0, 0, -0.1 - 0.5 * size);\r\n        float d = sdBox(p, vec3(size, size, 0.001));\r\n        vec4 h = hexagon(p.xy * mix(20., 5., remapFrom(beat, 324., 328.)));\r\n        float emi = smoothstep(0.1, 0.0, h.z) * (0.2 + 2. * saturate(cos(beatTau / 4. + TAU * length(h.xy))));\r\n        if (beat >= 312.) emi *= 0.1;\r\n        if (beat >= 322.5) emi = mix(emi, 0.0, saturate((beat - 322.5) / 2.));\r\n        opU(m, d, M_LAZER, 0., emi);\r\n    }\r\n\r\n    return m;\r\n}\r\n\r\nuniform float gFighterNameSeed; // 272\r\n\r\nvec4 mapText(vec3 pos) {\r\n    vec4 m = vec4(999., 0., 0., 0.);\r\n    vec3 p = pos;\r\n\r\n    // グリーティング\r\n    vec3 fighter_group_pos = vec3(gFighterGroupPosX, gFighterGroupPosY, gFighterGroupPosZ);\r\n    p = pos - fighter_group_pos;\r\n\r\n    float a = 0.06;\r\n    vec3 grid = floor(p / a + 0.5);\r\n    p = opRepLim(p, a, vec3(7, 1, 4));\r\n    vec2 rnd = hash23(grid);\r\n    p.y -= 0.005 * sin(TAU * rnd.x + beatTau / 32.);\r\n\r\n    vec3 p1 = p;\r\n    p1.y -= 0.004;\r\n    float b = 0.0018;\r\n    float id;\r\n\r\n    if (grid.y == -1. && grid.z == 4.) {\r\n        id = 5. + mod(grid.x, 5.);\r\n    } else {\r\n        id = 10. + floor(hash23(grid * gFighterNameSeed).x * 17.);\r\n    }\r\n\r\n    float text = texture(iTextTexture, textUv(vec2(-p1.x, p1.y) / b, id, vec2(0), 8.0)).r;\r\n\r\n    opU(m, sdBox(p1, vec3(b * 16., b, 0.01 * b)), M_NAME, 2. * text, 0.);\r\n\r\n    return m;\r\n}\r\n\r\nfloat depth_max;\r\n\r\nvec3 raymarch(vec3 ro, vec3 rd, vec3 bgcol, int layer) {\r\n    vec3 col = bgcol;\r\n    vec3 p;\r\n    vec4 m;\r\n    float t = 0.2;\r\n    float eps;\r\n\r\n    for (int i = ZERO; i < 200; i++) {\r\n        p = ro + rd * t;\r\n\r\n        if (layer == 0) {\r\n            m = mapLayer0(p);\r\n        } else {\r\n            m = mapLayer1(p);\r\n        }\r\n\r\n        t += m.x;\r\n        eps = t * 0.0005;\r\n        if (m.x < eps || t >= prevColor.a) {\r\n            break;\r\n        }\r\n    }\r\n\r\n    float range = 4.5;\r\n\r\n    if (sdBox(p, vec3(range)) < 0. && t < prevColor.a) {\r\n        vec3 emissive = vec3(0.);\r\n\r\n        if (m.y == M_LAZER) {\r\n            emissive = mix(vec3(255, 79, 1) / 255., vec3(0.1, 0.1, 1), m.z) * 10. * m.w;\r\n        } else if (m.y == M_NAME) {\r\n            emissive = vec3(1) * m.z;\r\n        }\r\n\r\n        col += emissive;\r\n    }\r\n\r\n    if (m.w > 0.01) {\r\n        depth = min(depth, t);\r\n    }\r\n\r\n    return col;\r\n}\r\n\r\nvec3 raymarchText(vec3 ro, vec3 rd, vec3 bgcol) {\r\n    vec3 col = bgcol;\r\n    vec3 p;\r\n    vec4 m;\r\n    float t = 0.;\r\n    float eps;\r\n\r\n    for (int i = ZERO; i < 100; i++) {\r\n        p = ro + rd * t;\r\n        m = mapText(p);\r\n        t += m.x;\r\n        eps = 0.00001;\r\n\r\n        if (t >= prevColor.a) {\r\n            break;\r\n        }\r\n\r\n        if (m.x < eps) {\r\n            if (m.z > 0.01) {\r\n                col += vec3(1) * m.z;\r\n                depth = t;\r\n                break;\r\n            } else {\r\n                t += eps * 100.;\r\n            }\r\n        }\r\n    }\r\n\r\n    return col;\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\r\n    beat = gBeat;\r\n    beatTau = beat * TAU;\r\n    beatPhase = phase(beat / 2.);\r\n\r\n    vec2 uv = fragCoord.xy / iResolution.xy;\r\n    prevColor = texture(iPrevPass, uv);\r\n\r\n    // Camera\r\n    vec2 uv2 = (2. * fragCoord.xy - iResolution.xy) / iResolution.x;\r\n\r\n    ro = vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ);\r\n    target = vec3(gCameraTargetX, gCameraTargetY, gCameraTargetZ);\r\n    fov = gCameraFov;\r\n\r\n    vec3 up = vec3(0, 1, 0);\r\n    vec3 fwd = normalize(target - ro);\r\n    vec3 right = normalize(cross(up, fwd));\r\n    up = normalize(cross(fwd, right));\r\n    vec3 rd = normalize(right * uv2.x + up * uv2.y + fwd / tan(fov * TAU / 720.));\r\n\r\n    boss_pos = vec3(gBossPosX, gBossPosY, gBossPosZ);\r\n    gurdian_pos = vec3(gGuardianPosX, gGuardianPosY, gGuardianPosZ);\r\n\r\n    depth = 999.;\r\n\r\n    vec3 scol = raymarch(ro, rd, prevColor.rgb, 0);\r\n    scol = raymarch(ro, rd, scol, 1);\r\n    if (beat >= 92. && beat < 100.) scol = raymarchText(ro, rd, scol);\r\n    scol = clamp(scol, 0.0, 100.0);\r\n\r\n    fragColor = vec4(scol, min(depth, prevColor.a));\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec4 prevColor;\r\n\r\nuniform float gCloudHeight;  // -0.4 -2 2\r\nuniform float gCloudSpeed; // 0.25\r\n\r\nfloat mapCloud(vec3 p, int oct) {\r\n    vec3 q = p + iTime * gCloudSpeed;\r\n    float g = 0.5 + 0.5 * noise(q * 0.3);\r\n\r\n    float f = fbm(q, oct);\r\n    f = mix(f * 0.1 - 0.5, f, g * g);\r\n\r\n    return 1.5 * f - p.y + gCloudHeight;\r\n}\r\n\r\n// Clouds\r\n// https://www.shadertoy.com/view/XslGRr\r\nvec4 raymarchCloud(vec3 ro, vec3 rd, vec3 bgcol, vec2 px) {\r\n    const int kDiv = 1;  // make bigger for higher quality\r\n\r\n    // bounding planes\r\n    float yb = gCloudHeight - 2.;\r\n    float yt = gCloudHeight + 1.;\r\n    float tb = (yb - ro.y) / rd.y;\r\n    float tt = (yt - ro.y) / rd.t;\r\n\r\n    // find tigthest possible raymarching segment\r\n    float tmin, tmax;\r\n    if (ro.y > yt) {\r\n        // above top plane\r\n        if (tt < 0.0) return vec4(0.0);  // early exit\r\n        tmin = tt;\r\n        tmax = tb;\r\n    } else {\r\n        // inside clouds slabs\r\n        tmin = 0.0;\r\n        tmax = 60.0;\r\n        if (tt > 0.0) tmax = min(tmax, tt);\r\n        if (tb > 0.0) tmax = min(tmax, tb);\r\n    }\r\n\r\n    // 不透明と合成\r\n    tmax = min(tmax, prevColor.a);\r\n\r\n    // dithered near distance\r\n    float t = tmin + 0.1 * hash12(px);\r\n\r\n    // raymarch loop\r\n    vec4 sum = vec4(0.0);\r\n    for (int i = ZERO; i < 190 * kDiv; i++) {\r\n        // step size\r\n        float dt = max(0.05, 0.02 * t / float(kDiv));\r\n\r\n        int oct = 5 - int(log2(1.0 + t * 0.5));\r\n\r\n        // sample cloud\r\n        vec3 pos = ro + t * rd;\r\n        float den = mapCloud(pos, oct);\r\n        if (den > 0.01)  // if inside\r\n        {\r\n            // do lighting\r\n            float dif = clamp((den - mapCloud(pos + 0.3 * sundir, oct)) / 0.25, 0.0, 1.0);\r\n            vec3 lin = vec3(0.65, 0.65, 0.75) * 1.1 + 0.8 * vec3(0.6, 0.6, 0.5) * dif;\r\n            vec4 col = vec4(mix(vec3(1.0), vec3(0.25, 0.3, 0.4), den), den);\r\n            col.xyz *= lin;\r\n            // fog\r\n            col.xyz = mix(col.xyz, bgcol, 1.0 - exp2(-0.1 * t));\r\n            // composite front to back\r\n            col.w = min(col.w * 8.0 * dt, 1.0);\r\n            col.rgb *= col.a;\r\n            sum += col * (1.0 - sum.a);\r\n        }\r\n        // advance ray\r\n        t += dt;\r\n        // until far clip or full opacity\r\n        if (t > tmax || sum.a > 0.99) break;\r\n    }\r\n\r\n    return clamp(sum, 0.0, 1.0);\r\n}\r\n\r\nvec3 renderScene(inout vec3 ro, inout vec3 rd, vec2 px) {\r\n    // sky\r\n    vec3 bgcol = skyColor(rd);\r\n\r\n    // opaque geometory\r\n    vec3 col = prevColor.rgb;\r\n\r\n    if (scene_id == 0) {\r\n        // clouds\r\n        vec4 res = raymarchCloud(ro, rd, bgcol, px);\r\n        col = col * (1.0 - res.w) + res.xyz;\r\n\r\n        // sun glare\r\n        float sun = sunColor(rd);\r\n        col += 0.2 * vec3(1.0, 0.4, 0.2) * pow(sun, 3.0);\r\n    }\r\n\r\n    return col;\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\r\n    beat = gBeat;\r\n    beatTau = beat * TAU;\r\n    beatPhase = phase(beat / 2.);\r\n\r\n    vec2 uv = fragCoord.xy / iResolution.xy;\r\n    prevColor = texture(iPrevPass, uv);\r\n\r\n    // Camera\r\n    vec2 noise = hash23(vec3(iFrame, fragCoord)) - .5;  // AA\r\n    vec2 uv2 = (2. * (fragCoord.xy + noise) - iResolution.xy) / iResolution.x;\r\n\r\n    scene_id = 0;\r\n\r\n    if (beat >= 35. && beat < 60.) {\r\n        scene_id = 1;\r\n    }\r\n\r\n    ro = vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ);\r\n    target = vec3(gCameraTargetX, gCameraTargetY, gCameraTargetZ);\r\n    fov = gCameraFov;\r\n\r\n    vec3 up = vec3(0, 1, 0);\r\n    vec3 fwd = normalize(target - ro);\r\n    vec3 right = normalize(cross(up, fwd));\r\n    up = normalize(cross(fwd, right));\r\n    vec3 rd = normalize(right * uv2.x + up * uv2.y + fwd / tan(fov * TAU / 720.));\r\n\r\n    vec3 scol = clamp(renderScene(ro, rd, fragCoord), 0.0, 100.0);\r\n    fragColor = vec4(scol, 1);\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="vec4 prevColor;\r\n\r\nvec2 greetingsUv(vec2 uv, float t, float scale)\r\n{\r\n    uv /= scale;\r\n    float aspect = 2048.0 / TEXT_TEX_HEIGHT;\r\n    uv.x = 0.5 + 0.5 * uv.x;\r\n    uv.y = 0.5 - 0.5 * (aspect * uv.y) + t - 0.2;\r\n    uv.y = clamp(uv.y, 128. * 27.0 / TEXT_TEX_HEIGHT, 1.);\r\n    return uv;\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor, vec2 fragCoord) {\r\n    beat = gBeat;\r\n    beatTau = beat * TAU;\r\n\r\n    vec2 uv = fragCoord.xy / iResolution.xy;\r\n    prevColor = texture(iPrevPass, uv);\r\n\r\n    uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\r\n\r\n    vec3 col = prevColor.rgb;\r\n    vec3 add = vec3(0.0);\r\n    float a = 1.;\r\n    float b = 0.;\r\n\r\n    TL(328.) {}\r\n    else TL(336.) {\r\n        // TITLE\r\n        add += texture(iTextTexture, textUv(uv, 0.0, vec2(0.0, 0.0), 3.0)).rgb;\r\n        a = remap(t, 6., 8., 1., 0.);\r\n    }\r\n    else TL(344.) {\r\n        // gam0022 & HAHAD\r\n        add += texture(iTextTexture, textUv(uv, 1.0, vec2(-1.0, 0.1), 1.0)).rgb;\r\n        add += texture(iTextTexture, textUv(uv, 2.0, vec2(-1.0, -0.1), 1.0)).rgb;\r\n\r\n        add += texture(iTextTexture, textUv(uv, 3.0, vec2(1.0, 0.1), 1.0)).rgb;\r\n        add += texture(iTextTexture, textUv(uv, 4.0, vec2(1.0, -0.1), 1.0)).rgb;\r\n        a = remap(t, 6., 8., 1., 0.);\r\n    }\r\n    else TL(360.) {\r\n        // greetings\r\n        add += texture(iTextTexture, greetingsUv(uv, t / 12., 1.0)).rgb;\r\n        a = remap(t, 15., 16., 1., 0.);\r\n        b = remap(t, 9., 11., 0.7, 0.);\r\n    }\r\n\r\n    col = mix(col, vec3(0), b) + add * a;\r\n\r\n    fragColor = vec4(col, prevColor.a);\r\n}"},function(r,n,e){"use strict";e.r(n),n.default="uniform float gChromaticAberrationIntensity;  // 0 0 0.1 post\r\nuniform float gChromaticAberrationDistance;   // 0 0 1\r\n\r\nuniform float gVignetteIntensity;   // 1 0 3\r\nuniform float gVignetteSmoothness;  // 1.6 0 5\r\nuniform float gVignetteRoundness;   // 1 0 1\r\n\r\nuniform float gTonemapExposure;  // 1.5 0.0 2\r\nuniform float gFlash;            // 0 0 1\r\nuniform float gFlashSpeed;       // 0 0 60\r\nuniform float gBlend;            // 0 -1 1\r\n\r\nuniform float gGlitchIntensity;  // 0 0 0.1\r\nuniform float gXSfhitGlitch;     // 0 0 0.1\r\nuniform float gInvertRate;       // 0 0 1\r\n\r\n// https://www.shadertoy.com/view/lsf3WH\r\n// Noise - value - 2D by iq\r\nfloat noise(vec2 p) {\r\n    vec2 i = floor(p);\r\n    vec2 f = fract(p);\r\n    vec2 u = f * f * (3.0 - 2.0 * f);\r\n    return mix(mix(hash12(i + vec2(0.0, 0.0)), hash12(i + vec2(1.0, 0.0)), u.x), mix(hash12(i + vec2(0.0, 1.0)), hash12(i + vec2(1.0, 1.0)), u.x), u.y);\r\n}\r\n\r\nfloat fbm(vec2 uv) {\r\n    float f = 0.0;\r\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\r\n    f = 0.5000 * noise(uv);\r\n    uv = m * uv;\r\n    f += 0.2500 * noise(uv);\r\n    uv = m * uv;\r\n    f += 0.1250 * noise(uv);\r\n    uv = m * uv;\r\n    f += 0.0625 * noise(uv);\r\n    uv = m * uv;\r\n    return f;\r\n}\r\n\r\nfloat vignette(vec2 uv) {\r\n    vec2 d = abs(uv - 0.5) * gVignetteIntensity;\r\n    float roundness = (1.0 - gVignetteRoundness) * 6.0 + gVignetteRoundness;\r\n    d = pow(d, vec2(roundness));\r\n    return pow(saturate(1.0 - dot(d, d)), gVignetteSmoothness);\r\n}\r\n\r\n// vec3 acesFilm(const vec3 x) {\r\n//     const float a = 2.51;\r\n//     const float b = 0.03;\r\n//     const float c = 2.43;\r\n//     const float d = 0.59;\r\n//     const float e = 0.14;\r\n//     return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\r\n// }\r\n\r\nvec3 invert(vec3 c, vec2 uv) {\r\n    if (hash12(vec2(floor(uv.y * gInvertRate * 32.0), beat)) < gInvertRate) {\r\n        return vec3(1.0) - c;\r\n    } else {\r\n        return c;\r\n    }\r\n}\r\n\r\nvec3 flash(vec3 c) {\r\n    c = mix(c, vec3(1.0), gFlash * saturate(cos(iTime * PI * .5 * gFlashSpeed)));\r\n    return c;\r\n}\r\n\r\nvec3 chromaticAberration(vec2 uv) {\r\n    uv.x += gXSfhitGlitch * (fbm(vec2(232.0 * uv.y, gBeat)) - 0.5);\r\n\r\n    vec2 d = abs(uv - 0.5);\r\n    float f = mix(0.5, dot(d, d), gChromaticAberrationDistance);\r\n    f *= f * gChromaticAberrationIntensity;\r\n    vec2 shift = vec2(f);\r\n\r\n    float a = 2.0 * hash11(gBeat) - 1.0;\r\n    vec2 grid = hash23(vec3(floor(vec2(uv.x * (4.0 + 8.0 * a), (uv.y + a) * 32.0)), gBeat));\r\n    grid = 2.0 * grid - 1.0;\r\n    shift += gGlitchIntensity * grid;\r\n\r\n    vec3 col;\r\n    col.r = texture(iPrevPass, uv + shift).r;\r\n    col.g = texture(iPrevPass, uv).g;\r\n    col.b = texture(iPrevPass, uv - shift).b;\r\n    return col;\r\n}\r\n\r\nvec3 blend(vec3 c) {\r\n    c = mix(c, vec3(1.0), saturate(gBlend));\r\n    c = mix(c, vec3(0.0), saturate(-gBlend));\r\n    return c;\r\n}\r\n\r\n// https://github.com/KhronosGroup/ToneMapping/blob/main/PBR_Neutral/pbrNeutral.glsl\r\nvec3 PBRNeutralToneMapping(vec3 color) {\r\n    const float startCompression = 0.8 - 0.04;\r\n    const float desaturation = 0.15;\r\n\r\n    float x = min(color.r, min(color.g, color.b));\r\n    float offset = x < 0.08 ? x - 6.25 * x * x : 0.04;\r\n    color -= offset;\r\n\r\n    float peak = max(color.r, max(color.g, color.b));\r\n    if (peak < startCompression) return color;\r\n\r\n    const float d = 1. - startCompression;\r\n    float newPeak = 1. - d * d / (peak + d - startCompression);\r\n    color *= newPeak / peak;\r\n\r\n    float g = 1. - 1. / (desaturation * (peak - newPeak) + 1.);\r\n    return mix(color, newPeak * vec3(1, 1, 1), g);\r\n}\r\n\r\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\r\n    vec2 uv = fragCoord / iResolution.xy;\r\n    // vec3 col = texture(iPrevPass, uv).rgb;\r\n    vec3 col = chromaticAberration(uv);\r\n    col = PBRNeutralToneMapping(col * gTonemapExposure);\r\n    col *= vignette(uv);\r\n    col = invert(col, uv);\r\n    col = flash(col);\r\n    col = blend(col);\r\n    // col = pow(col, vec3(1.0 / 2.2));\r\n    fragColor = vec4(col, 1.0);\r\n}\r\n"},function(r,n,e){"use strict";e.r(n),n.default="float brightness(vec3 c) { return max(max(c.r, c.g), c.b); }\n\nuniform float gBloomThreshold;  // 1.5 0 100 bloom\nuniform float gBloomSoftKnee;   // 0.5 0 4\n\n// https://github.com/Unity-Technologies/PostProcessing/blob/v1/PostProcessing/Runtime/Components/BloomComponent.cs#L65-L67\n// https://github.com/Unity-Technologies/PostProcessing/blob/v1/PostProcessing/Resources/Shaders/Bloom.shader#L86-L117\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float softKnee = gBloomSoftKnee;\n    float lthresh = gBloomThreshold;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iPrevPass, uv);\n    vec3 m = color.rgb;\n    float br = brightness(m);\n\n    float knee = lthresh * softKnee + 1e-5;\n    vec3 curve = vec3(lthresh - knee, knee * 2.0, 0.25 / knee);\n    float rq = clamp(br - curve.x, 0.0, curve.y);\n    rq = curve.z * rq * rq;\n\n    m *= max(rq, br - lthresh) / max(br, 1e-5);\n    m = max(m, vec3(0.0));\n\n    fragColor = vec4(m, color.a);\n}"},function(r,n,e){"use strict";e.r(n),n.default="void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    fragColor = vec4(tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(r,n,e){"use strict";e.r(n),n.default="uniform sampler2D iBeforeBloom;\nuniform sampler2D iPairBloomDown;\n\nuniform float gBloomSpread;  // 1.3 1 2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec3 col = texture(iPairBloomDown, uv).rgb;\n    fragColor = vec4(col + gBloomSpread * tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(r,n,e){"use strict";e.r(n),n.default="uniform sampler2D iBeforeBloom;\nuniform sampler2D iPairBloomDown;\n\nuniform float gBloomIntensity;  // 0.3 0 30\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec3 col = texture(iBeforeBloom, uv).rgb;\n    vec3 pair = texture(iPairBloomDown, uv).rgb;\n    fragColor = vec4(col + gBloomIntensity * tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(r,n,e){"use strict";e.r(n),n.default="#version 300 es\r\nprecision mediump float;\r\nuniform float iSampleRate;\r\nuniform float iBlockOffset;\r\n\r\nvec2 mainSound(int samp, float time);\r\n\r\nout vec4 outColor;\r\nvoid main() {\r\n    float t = iBlockOffset + ((gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * 512.0) / iSampleRate;\r\n    vec2 y = mainSound(int(iSampleRate), t);\r\n    vec2 v = floor((0.5 + 0.5 * y) * 65536.0);\r\n    vec2 vl = mod(v, 256.0) / 255.0;\r\n    vec2 vh = floor(v / 256.0) / 255.0;\r\n    outColor = vec4(vl.x, vh.x, vl.y, vh.y);\r\n}\r\n\r\n//--------------------\r\n// ここから下を書き換える\r\n//--------------------\r\n\r\nvec2 mainSound(int samp, float time) {\r\n    // A 440 Hz wave that attenuates quickly overt time\r\n    return vec2(sin(6.2831 * 440.0 * time) * exp(-3.0 * time));\r\n}\r\n"},function(r,n,e){"use strict";e.r(n),n.default="body{background-color:#000;margin:0;padding:0}#c{display:none}canvas{display:block;position:absolute;top:0;left:0;right:0;bottom:0;margin:auto}.container{display:flex;flex-direction:column;position:absolute;top:0;justify-content:center;align-items:center;width:100%;height:100%;color:#fff}p{font-size:100px;font-family:arial;text-align:center}.button{border-style:solid;padding:10px 20px;animation:blinkAnime .85714285714s infinite alternate}@keyframes blinkAnime{0%{border-color:#000}100%{border-color:#fff}}select{font-size:100px;font-family:arial;text-align:center}.lds-facebook{display:inline-block;position:relative;width:80px;height:80px}.lds-facebook div{display:inline-block;position:absolute;left:8px;width:16px;background:#fff;animation:lds-facebook 1.2s cubic-bezier(0,.5,.5,1) infinite}.lds-facebook div:nth-child(1){left:8px;animation-delay:-.24s}.lds-facebook div:nth-child(2){left:32px;animation-delay:-.12s}.lds-facebook div:nth-child(3){left:56px;animation-delay:0}@keyframes lds-facebook{0%{top:8px;height:64px}100%,50%{top:24px;height:32px}}"},function(r,n,e){"use strict";e.r(n);var o=function(r,n,e,o){return new(e||(e=Promise))((function(t,a){function i(r){try{f(o.next(r))}catch(r){a(r)}}function s(r){try{f(o.throw(r))}catch(r){a(r)}}function f(r){var n;r.done?t(r.value):(n=r.value,n instanceof e?n:new e((function(r){r(n)}))).then(i,s)}f((o=o.apply(r,n||[])).next())}))},t=function(r,n){var e,o,t,a,i={label:0,sent:function(){if(1&t[0])throw t[1];return t[1]},trys:[],ops:[]};return a={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function s(a){return function(s){return function(a){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,o&&(t=2&a[0]?o.return:a[0]?o.throw||((t=o.return)&&t.call(o),0):o.next)&&!(t=t.call(o,a[1])).done)return t;switch(o=0,t&&(a=[2&a[0],t.value]),a[0]){case 0:case 1:t=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,o=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(t=i.trys,(t=t.length>0&&t[t.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!t||a[1]>t[0]&&a[1]<t[3])){i.label=a[1];break}if(6===a[0]&&i.label<t[1]){i.label=t[1],t=a;break}if(t&&i.label<t[2]){i.label=t[2],i.ops.push(a);break}t[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(r,i)}catch(r){a=[6,r],o=0}finally{e=t=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,s])}}},a=0,i=1,s=2,f=3,l=4,c=function(){},u=function(r,n,e,u,m,d,p,v,g,h,x,b){var y=this;this.init=function(){y.timeLength=r,y.isPlaying=!0,y.needsUpdate=!1,y.time=0,y.frame=0,y.debugFrameNumber=-1,y.uniformArray=[],y.uniforms={};var _=y.audioContext=new window.AudioContext,C=y.canvas=document.createElement("canvas");C.width=window.innerWidth,C.height=window.innerHeight,window.document.body.appendChild(C);var T=C.getContext("webgl2",{preserveDrawingBuffer:!0});if(T)if(T.getExtension("EXT_color_buffer_float"))if(T.getExtension("OES_texture_float_linear")){T.enable(T.CULL_FACE);var R=[[1,1],[-1,1],[1,-1],[-1,-1]],E=new Float32Array([].concat.apply([],R)),P=T.createBuffer();T.bindBuffer(T.ARRAY_BUFFER,P),T.bufferData(T.ARRAY_BUFFER,E,T.STATIC_DRAW),T.bindBuffer(T.ARRAY_BUFFER,null);var w=[[0,1,2],[3,2,1]],B=new Uint16Array([].concat.apply([],w)),F=T.createBuffer();T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,F),T.bufferData(T.ELEMENT_ARRAY_BUFFER,B,T.STATIC_DRAW),T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,null);var S=T.createVertexArray(),A=[],I=b(T),G=(e.split("\n").length,function(r){return"object"==typeof r&&"r"in r?[r.r,r.g,r.b]:r}),z=function(r,n){var e=T.createShader(n);if(T.shaderSource(e,r),T.compileShader(e),!T.getShaderParameter(e,T.COMPILE_STATUS)){var o=T.getShaderInfoLog(e);console.log(r,o)}return e},k=function(r){var e=[z(n,T.VERTEX_SHADER),z(r,T.FRAGMENT_SHADER)],o=T.createProgram();return e.forEach((function(r){return T.attachShader(o,r)})),T.linkProgram(o),T.getProgramParameter(o,T.LINK_STATUS)||console.log(T.getProgramInfoLog(o)),o},M=function(r){if(r.type===i)return{frameBuffer:null,texture:null};var n=r.uniforms.iResolution.value[0],e=r.uniforms.iResolution.value[1],o=T.FLOAT,t=T.RGBA32F,a=T.LINEAR;r.type===l&&(n=512,e=512,o=T.UNSIGNED_BYTE,t=T.RGBA,a=T.NEAREST);var s=T.createFramebuffer();T.bindFramebuffer(T.FRAMEBUFFER,s);var f=T.createTexture();return T.bindTexture(T.TEXTURE_2D,f),T.texImage2D(T.TEXTURE_2D,0,t,n,e,0,T.RGBA,o,null),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_MAG_FILTER,a),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_MIN_FILTER,a),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_WRAP_S,T.CLAMP_TO_EDGE),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_WRAP_T,T.CLAMP_TO_EDGE),T.framebufferTexture2D(T.FRAMEBUFFER,T.COLOR_ATTACHMENT0,T.TEXTURE_2D,f,0),T.bindTexture(T.TEXTURE_2D,null),T.bindRenderbuffer(T.RENDERBUFFER,null),T.bindFramebuffer(T.FRAMEBUFFER,null),{frameBuffer:s,texture:f}},U=function(r,n,e,o){!function(r){T.bindVertexArray(S),T.bindBuffer(T.ARRAY_BUFFER,P),T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,F);var n=T.getAttribLocation(r,"vert2d"),e=T.FLOAT,o=R[0].length,t=o*Float32Array.BYTES_PER_ELEMENT;T.enableVertexAttribArray(n),T.vertexAttribPointer(n,o,e,!1,t,0),T.bindVertexArray(null)}(r);var t=new c;if(t.program=r,t.index=n,t.type=e,t.scale=o,t.uniforms={iResolution:{type:"v3",value:[C.width*t.scale,C.height*t.scale,0]},iTime:{type:"f",value:0},iFrame:{type:"f",value:0},iPrevPass:{type:"t",value:Math.max(t.index-1,0)},iChannel0:{type:"t",value:t.index},iBeforeBloom:{type:"t",value:Math.max(m-1,0)},iBlockOffset:{type:"f",value:0},iSampleRate:{type:"f",value:_.sampleRate},iTextTexture:{type:"t",value:0}},e===f){var a=n-(m+d);t.uniforms.iPairBloomDown={type:"t",value:n-2*a}}return y.uniformArray.forEach((function(r){t.uniforms[r.key]={type:"number"==typeof r.initValue?"f":"v3",value:G(r.initValue)}})),t.locations=function(r){var n={};return Object.keys(r.uniforms).forEach((function(e){n[e]=T.getUniformLocation(r.program,e)})),n}(t),t.front=M(t),t.back=M(t),t},L=function(r){T.useProgram(r.program),T.bindFramebuffer(T.FRAMEBUFFER,r.front.frameBuffer);for(var n=0,e=Object.entries(r.uniforms);n<e.length;n++){var o=e[n],t=o[0],a=o[1],i={f:T.uniform1f,v3:T.uniform3fv},s={iPrevPass:0,iBeforeBloom:1,iPairBloomDown:2,iTextTexture:3,iChannel0:4};"t"===a.type?(T.activeTexture(T.TEXTURE0+s[t]),"iTextTexture"===t?T.bindTexture(T.TEXTURE_2D,I):T.bindTexture(T.TEXTURE_2D,A[a.value].back.texture),T.uniform1i(r.locations[t],s[t])):i[a.type].call(T,r.locations[t],a.value)}T.bindVertexArray(S);var f=0*w[0].length;T.drawElements(T.TRIANGLES,B.length,T.UNSIGNED_SHORT,f);var l=T.getError();l!==T.NO_ERROR&&console.log(l),T.bindVertexArray(null),T.useProgram(null);var c=r.front;r.front=r.back,r.back=c};y.setSize=function(r,n){var e=T.canvas;e.width=r,e.height=n,T.viewport(0,0,r,n),A.forEach((function(e){T.deleteFramebuffer(e.front.frameBuffer),T.deleteFramebuffer(e.back.frameBuffer),T.deleteTexture(e.front.texture),T.deleteTexture(e.back.texture),e.uniforms.iResolution.value=[r*e.scale,n*e.scale,0],e.front=M(e),e.back=M(e)}))},y.playSound=function(){y.audioSource.start(y.audioContext.currentTime,y.time%y.timeLength)},y.render=function(){A.forEach((function(r){r.uniforms.iTime.value=y.time,r.uniforms.iFrame.value=y.frame;for(var n=0,e=Object.entries(y.uniforms);n<e.length;n++){var o=e[n],t=o[0],a=o[1];void 0!==r.uniforms[t]&&(r.uniforms[t].value="number"==typeof a?a:G(a))}L(r)}))};var N=function(r){for(var n,e=/uniform (float|vec3) (g.+);\s*(\/\/ ([\-\d\.-]+))?( ([\-\d\.]+) ([\-\d\.]+))?( [\w\d]+)?/g;null!==(n=e.exec(r));){var o=void 0;o="float"===n[1]?{key:n[2],initValue:void 0!==n[4]?parseFloat(n[4]):0}:{key:n[2],initValue:{r:parseFloat(n[4]),g:parseFloat(n[6]),b:parseFloat(n[7])}},y.uniforms[o.key]||(y.uniformArray.push(o),y.uniforms[o.key]=o.initValue)}};N(e),u.forEach((function(r){N(r)})),N(p),N(v),N(g),N(h);var D=0;u.forEach((function(r,n,o){if(n===m){A.push(U(k(e+p),D,s,1)),D++;for(var t=1,l=0;l<d;l++)t*=.5,A.push(U(k(e+v),D,s,t)),D++;for(l=0;l<d-1;l++)t*=2,A.push(U(k(e+g),D,f,t)),D++;A.push(U(k(e+h),D,f,1)),D++}A.push(U(k(e+r),D,n<o.length-1?a:i,1)),D++})),function(){for(var n=Math.ceil(_.sampleRate*r),e=_.createBuffer(2,n,_.sampleRate),a=n/262144,i=k(x),s=U(i,0,l,1),f=0;f<a;f++){s.uniforms.iBlockOffset.value=262144*f/_.sampleRate,L(s);var c=new Uint8Array(1048576);T.readPixels(0,0,512,512,T.RGBA,T.UNSIGNED_BYTE,c);for(var u=e.getChannelData(0),m=e.getChannelData(1),d=0;d<262144;d++)u[262144*f+d]=(c[4*d+0]+256*c[4*d+1])/65535*2-1,m[262144*f+d]=(c[4*d+2]+256*c[4*d+3])/65535*2-1}y.audioSource=_.createBufferSource(),o(y,void 0,void 0,(function(){var r,n;return t(this,(function(e){switch(e.label){case 0:return[4,fetch("guardian.mp3")];case 1:return[4,e.sent().arrayBuffer()];case 2:return r=e.sent(),n=this.audioSource,[4,_.decodeAudioData(r)];case 3:return n.buffer=e.sent(),[2]}}))})),y.audioSource.connect(_.destination)}();var Z=0,O=null,Y=function(r){requestAnimationFrame(Y),O||(O=r);var n=.001*(r-Z);(y.isPlaying||y.needsUpdate)&&(null!=y.onRender&&y.onRender(y.time,n),y.render(),y.time=.001*(r-O),y.frame++),y.needsUpdate=!1,Z=r};y.play=function(){requestAnimationFrame(Y)}}else alert("need OES_texture_float_linear");else alert("need EXT_color_buffer_float");else console.log("WebGL 2 is not supported...")}},m=function(r,n,e){return r*(1-e)+n*e},d=function(r,n,e){return r<n?n:r>e?e:r},p=function(r){return d(r,0,1)},v=function(r,n,e,o,t){return function(r,n,e){return n<e?d(r,n,e):d(r,e,n)}(o+(r-n)*(t-o)/(e-n),o,t)},g=function(r,n,e){return v(r,n,e,0,1)},h=function(r,n){return Math.sin(r+n)+.5*Math.sin(2*r+n)+.25*Math.sin(4*r+n)},x=function(r){return r<.5?4*r*r*r:(r-1)*(2*r-2)*(2*r-2)+1},b=function(){function r(r,n,e){this.x=r,this.y=n,this.z=e}return r.prototype.add=function(n){return new r(this.x+n.x,this.y+n.y,this.z+n.z)},r.prototype.mul=function(n){return new r(this.x*n.x,this.y*n.y,this.z*n.z)},r.prototype.scale=function(n){return new r(this.x*n,this.y*n,this.z*n)},r.mix=function(n,e,o){return new r(m(n.x,e.x,o),m(n.y,e.y,o),m(n.z,e.z,o))},r.fbm=function(n){return new r(h(11431,n),h(23123,n),h(87034,n))},r}(),y=new u(178.703,e(0).default,e(1).default,[e(2).default,e(3).default,e(4).default,e(5).default,e(6).default],4,5,e(7).default,e(8).default,e(9).default,e(10).default,e(11).default,(function(r){var n=document.createElement("canvas"),e=n.getContext("2d"),o=["GUARDI"+String.fromCharCode(9650)+"N","GRAPHICS","gam0022","MUSIC","HADHAD","Renard","sadakkey","kaneta","setchi","FL1NE","AROMA","MIKAN","SACHIEL","SHAMSHEL","RAMIEL","GAGHIEL","ISRAFEL","SANDALPHON","MATRIEL","SAHAQUIEL","IREUL","LELIEL","BARDIEL","ZERUEL","ARAEL","ALMISAEL","TABRIS"],t=["_baku89","0b5vr","0x4015 & YET1","AFWD","Alcatraz","Aldroid ","anticore","AriakeShima","birth_freedial","butadiene121","c5h12","Callisto / Gpo^Flush^Vital motion","Celken","chirality ","ciosai_tw","Conspiracy","Crimson_Apple","Ctrl-Alt-Test","d0117_0","DESiRE ","Die Kantorei","Dilik","DJ SHARPNEL","doxas","ewaldhew","Exca","Fairlight","Farbrausch","Filippp","FL1NE","Flashira / Frontation","Flopine","fotfla","Futuris","gaz","h013","hacha","Haru86","hiyohiyo","I.C.U.P.","Ivan Dianov","jaezu","jirohcl","Jugem_T","kaiware007","Kamoshika","kaneta","kazpulse","kinankomoti","kioku","kostik","LJ","logicoma","Los Pat Moritas","lox","Machia","machiaworks","MERCURY","mikkabouzu","minimalartifact","moistpeace","monnokazue","MoscowMule","mrdoob","Murasaqi","Musk","New-C-Rex","nikhotmsk","Niko_14","nikq","Nunu","NuSan","Peregrine","phi16","Polarity","Poo-Brain","prakashph","Prismbeings","rakurai","Reflex","Renard","RGBA & TBC","RIKUPI-X","rimina","sadakkey","SainaKey","setchi","Shampagne","shivaduke","Shoch0922","sola_117","soma_arc","sp4ghet","spaztron64 & ShinkoNet",String.fromCharCode(189)+"-bit Cheese","Superogue ","SystemK","TheDuccinator","tktk","TOCHKA","tokkyo","totetmatt","TsumikiRoom","TYA-PA-","ukeyshima","ukonpower","uma_helmet","Virtua Point Zero","visy ","W0NYV","wbcbz7","wrighter","yahagi_day","ymg","yumcyawiz","Zavie",String.fromCharCode(29420,27005,22238,12375)+"eddy"];n.width=2048,n.height=8096,e.clearRect(0,0,n.width,n.height),e.fillStyle="black",e.fillRect(0,0,n.width,n.height),e.font="110px arial",e.textAlign="center",e.textBaseline="middle",e.fillStyle="white",o.forEach((function(r,o){e.fillText(r,n.width/2,64+128*o)})),e.font="40px arial";for(var a=0;a<t.length/3;a++)for(var i=0;i<3;i++){var s=3*a+i;e.fillText(t[s],n.width/2+700*(i-1),128*o.length+350+100*a)}e.font="70px arial",e.fillText("GREETINGS",n.width/2,128*o.length+100),e.fillText(String.fromCharCode(9650)+"LL @ SESSIONS 2024",n.width/2,128*o.length+550+t.length/3*100);var f=r.createTexture();return r.bindTexture(r.TEXTURE_2D,f),r.texImage2D(r.TEXTURE_2D,0,r.RGBA,r.RGBA,r.UNSIGNED_BYTE,n),r.generateMipmap(r.TEXTURE_2D),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_MIN_FILTER,r.LINEAR_MIPMAP_LINEAR),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_S,r.CLAMP_TO_EDGE),r.texParameteri(r.TEXTURE_2D,r.TEXTURE_WRAP_T,r.CLAMP_TO_EDGE),f})),_=function(){function r(r){this.input=r,this.begin=0,this.done=!1}return r.prototype.then=function(r,n){if(this.done||this.input<this.begin)return this;if(this.input>=r)return this.begin=r,this;var e=this.input-this.begin;return n(e,e/(r-this.begin)),this.done=!0,this},r.prototype.over=function(r){return this.done||(r(this.input-this.begin),this.done=!0),this},r}();window.addEventListener("load",(function(){var r=!1,n=document.createElement("style");n.innerText=e(12).default,document.head.appendChild(n),document.addEventListener("fullscreenchange",(function(){document.body.style.cursor=window.document.fullscreenElement?"none":"auto"}));var o=document.createElement("div");o.className="container",document.body.appendChild(o);var t=document.createElement("p");t.innerHTML="RESOLUTION: ",o.appendChild(t);var a=document.createElement("select");a.innerHTML='\n    <option value="0.25">LOW 25%</option>\n    <option value="0.5">REGULAR 50%</option>\n    <option value="0.75">REGULAR 75%</option>\n    <option value="1.0" selected>FULL 100%</option>\n    ',t.appendChild(a);var i=document.createElement("p");o.appendChild(i),i.innerHTML="CLICK TO START",i.className="button",i.onclick=function(){i.remove(),t.remove();var n=document.createElement("p");n.innerHTML='LOADING <div class="lds-facebook"><div></div><div></div><div></div></div>',o.appendChild(n);var e=document.createElement("p");e.innerHTML="It takes about one minute. Please wait.",e.style.fontSize="50px",o.appendChild(e),document.body.requestFullscreen().then((function(){setTimeout((function(){y.onRender=function(n){!function(r,n,e){var o=80*r/60,t=new b(0,0,10),a=new b(0,0,0),i=80;y.uniformArray.forEach((function(r){y.uniforms[r.key]=r.initValue})),new _(r).then(33,(function(r){o=r*(i=80)/60})).then(105,(function(r){o=r*(i=130)/60+44})).then(147.666,(function(r){o=r*(i=180)/60+200})).then(178.703,(function(r){o=r*(i=80)/60+328})).over((function(r){o=r*(i=80)/60+364})),y.uniforms.gBeat=o,y.uniforms.gBPM=i;var s=o*Math.PI*2;new _(o).then(8,(function(r,n){t=new b(4.1490156637056055,1.0968469279843944,-11.353784659725086).add(b.fbm(r).scale(.001)),a=new b(.016955454750722403,.14793101675967354,.501058853108791),y.uniforms.gCameraFov=40-.5*r,y.uniforms.gCloudHeight=m(.7,-.9,n),y.uniforms.gCloudSpeed=.5})).then(12,(function(r,n){var e=new b(0,.07+.01*r,0);t=new b(.5883591660612857,.10203406202581011,-4.336503476625776).add(b.fbm(r).scale(.001)).add(e),a=new b(-1.005859797144463,-.8048280190594688,2.6203543580318014).add(t),y.uniforms.gCameraFov=38,y.uniforms.gCloudHeight=m(0,.2,n)})).then(16,(function(r){var n=new b(.01*r,0,0);t=new b(-1.3634260346223213,.3289286293461975,-3.8304745798817974).add(b.fbm(r).scale(.001)).add(n),a=new b(.7710197212562542,-.8374311636162176,2.688865312556434).add(t),y.uniforms.gCameraFov=38,y.uniforms.gCloudHeight=0})).then(24,(function(r){var n=new b(0,0,.01*r);t=new b(1.3451020450332654,.4265453623988059,-3.88028568662969).add(b.fbm(r).scale(.001)).add(n),a=new b(-.6832839590262174,-.43574021978182065,-1.2840699938762166).add(n),y.uniforms.gCameraFov=38,y.uniforms.gCloudHeight=0})).then(32,(function(r){var n=new b(0,.007*r,0);t=new b(.7762015646847797,.18667372736253335,2.590082972635911).add(b.fbm(r).scale(.001)).add(n),a=new b(-2.016479763310498,-.5062397407539351,-1.3945418659683448).add(t).add(n.scale(30*x(r/8))),y.uniforms.gCameraFov=38,y.uniforms.gCloudHeight=-.1})).then(36,(function(r,n){var e=new b(0,-2.5*x(n),0);t=new b(.10131840571789869,.7237780896903708,2.43513514852811).add(b.fbm(r).scale(.001)).add(e),a=new b(-.19381820721716034,-.12692619634252622,-.9670370800538417).add(t),y.uniforms.gCameraFov=40,y.uniforms.gBlend=-g(r,2,4)})).then(44,(function(r,n){t=new b(-30.414387535624794,1.208886712672777,35.46309070547005).add(b.fbm(r).scale(.001)),a=new b(0,1.3,0),y.uniforms.gCameraFov=40-10*x(2*n),y.uniforms.gBossPosY=.2+.2*Math.sin(s/8),y.uniforms.gBlend=-g(r,2,0)})).then(52,(function(r){a=new b(0,2,0),t=new b(12*Math.sin(r*Math.PI/64+.3),.7,-12*Math.cos(r*Math.PI/64+.3)).add(b.fbm(r).scale(.01)).add(a),y.uniforms.gCameraFov=40,y.uniforms.gBossPosY=.1+.04*r})).then(60,(function(r){t=new b(-30.414387535624794,1.208886712672777,35.46309070547005).add(b.fbm(r).scale(.01)),a=new b(-.26035536713600466,.9378391512667532,-.0514174491045528),y.uniforms.gCameraFov=40,y.uniforms.gBossPosY=.1+.04*(r+8)})).then(68,(function(r){t=new b(1.015697439944079,.26856329350311603,3.194015696080416).add(b.fbm(r).scale(.001)),a=new b(-.1739156356938652,.03997550509389635,4.204060038900983),y.uniforms.gCameraFov=40-r,y.uniforms.gBossPosY=m(-.15,.15,r/16),y.uniforms.gBossPosZ=4,a.y=y.uniforms.gBossPosY})).then(76,(function(r){t=new b(.6289319872711973,.31161288082395,1.8296485320439615).add(b.fbm(r).scale(.001)),a=new b(-.16262073673928468,.03875486207428894,4.219007989769242),y.uniforms.gCameraFov=40,y.uniforms.gBossPosY=.25,y.uniforms.gBossPosZ=m(4,3,r/16),a.y=y.uniforms.gBossPosY,a.z=y.uniforms.gBossPosZ})).then(84,(function(r,n){t=new b(.10520794198197293,.14594567981915546,-2.6349042345704783).add(b.fbm(r).scale(.001)),y.uniforms.gCameraFov=40,y.uniforms.gFighterGroupPosY=m(.01,.05,x(n)),y.uniforms.gFighterGroupPosZ=-2.765,a.y=y.uniforms.gFighterGroupPosY,a.z=y.uniforms.gFighterGroupPosZ,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=1.46,y.uniforms.gCloudHeight=.3})).then(92,(function(r,n){t=new b(.39360887299201974,.2320533691394181,-2.6318401869916643).add(b.fbm(r).scale(.001)),y.uniforms.gCameraFov=m(10,20,n),y.uniforms.gFighterGroupPosY=.05+.05*n,y.uniforms.gFighterGroupPosZ=.1*n-2.765,a.y=y.uniforms.gFighterGroupPosY,a.z=y.uniforms.gFighterGroupPosZ,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=1.46,y.uniforms.gCloudHeight=m(.5,.2,n)})).then(100,(function(r,n){t=new b(.3286409183831848,.2081418847419012,-1.025724148917415).add(b.fbm(r).scale(.001)),a=new b(.26153162651606054,.19479044179417726,-1.081551264291201),y.uniforms.gCameraFov=m(20,35,n),y.uniforms.gFighterGroupPosZ=m(-1.5,-1.4,n),y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=1.46,y.uniforms.gMotionBlur=0})).then(108,(function(r,n){t=new b(.4565254859955332,.250176488494367,-1.060860747302358).add(b.fbm(r).scale(.001)),a=new b(.36186610611673775,.24453569146779303,-1.1858573704750741),y.uniforms.gCameraFov=m(40,50,n),y.uniforms.gFighterGroupPosZ=m(-1.5,-1.4,n),y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=1.46,y.uniforms.gMotionBlur=0})).then(112,(function(r,n){var e=x(n);t=new b(.9569849083338932,.10538987873824357+.02*e,-.8059784805517212).add(b.fbm(r).scale(.001)),a=new b(-.15292178315526947,.16312791530474327,.23201799782991506),y.uniforms.gCameraFov=m(30,35,e),y.uniforms.gFighterGroupPosZ=m(-.15,0,n),y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=.55})).then(128,(function(r){t=new b(.3521396961132017,.21872926328342923,.00796151574640172).add(b.fbm(r).scale(.001)),a=new b(.22148730300588362,.19441097812607036,.21923801071625135),y.uniforms.gCameraFov=40+r,y.uniforms.gFighterGroupPosZ=-.2,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=.55})).then(144,(function(r){t=new b(1.318511195785962,1.187587640960162,-.5082985541038505).add(b.fbm(r).scale(.001)),a=new b(.2244010806010996,.3353839813438386,.25090122193944875),y.uniforms.gCameraFov=20+r,y.uniforms.gFighterGroupPosZ=0,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=.55})).then(150,(function(r){var n=new b(0,0,.01*r);t=new b(.7287323131667214,.6017210946462093,-1.9300953337998892).add(b.fbm(r).scale(.001)).add(n),a=new b(-.010157056059408342,.11745198344163901,.02605032199186473),y.uniforms.gCameraFov=32+r,y.uniforms.gFighterGroupPosZ=0,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=.55,y.uniforms.gCloudHeight=-.7})).then(162,(function(r){t=new b(.5925284396821858,.17559657845363058,.08645722197619565).add(b.fbm(r).scale(.001)),a=new b(.137447990061727,.1425306622833842,.37040967737115676),y.uniforms.gCameraFov=37+r,y.uniforms.gFighterGroupPosZ=0,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=.55,y.uniforms.gBossEmissive=m(2,6,g(r,0,12))})).then(184,(function(r){var n=new b(0,0,.02*r);t=new b(.9027724788680807,.6908531997751391,-.8414048675965144).add(b.fbm(r).scale(.001)).add(n),a=new b(.044367482273849845,.15203883161389553,.3102999060901639),y.uniforms.gCameraFov=37+r,y.uniforms.gFighterGroupPosZ=0,y.uniforms.gBossPosY=.15,y.uniforms.gBossPosZ=.55;var e=m(6,10,g(r,0,4));e=m(e,0,g(o,176,178)),y.uniforms.gBossEmissive=e,y.uniforms.gBossWingSpeed=o<168?2:o<176?4:1})).then(200,(function(r){t=new b(.6361788271820872,.5007125496953408,.6419374585984107).add(b.fbm(r).scale(.001)),a=new b(-.017530907512146685,-.0031504604838091714,-.002766890200959478),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gFighterGroupPosZ=-.2,y.uniforms.gGuardianPosY=m(-.5,0,r/16),a.y=Math.max(a.y,y.uniforms.gGuardianPosY),y.uniforms.gBossWingSpeed=0})).then(216,(function(r){t=new b(.40674250705959913,.06405314502448023,.7910462918202227).add(b.fbm(r).scale(3e-4)),a=new b(-.0053021436605017735,.052236671573974935,-.006721153310921296),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gFighterGroupPosZ=-.2,y.uniforms.gGuardianPosY=m(0,.2,r/16),a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossWingSpeed=.5})).then(232,(function(r){t=new b(.3565781031990457,.3229760946823658,.700940786474596).add(b.fbm(r).scale(.001)),a=new b(0,.3,0),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gGuardianPosY=.2,a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossEmissive=6,y.uniforms.gGuardianIfsRotZ=m(.65,.56,x(g(r,0,16))),y.uniforms.gBossWingSpeed=.5})).then(248,(function(r){a=new b(0,.3,0),t=new b(1*Math.sin(r*Math.PI/128+.3),.01*r-.1,-1*Math.cos(r*Math.PI/128+.3)).add(b.fbm(r).scale(.001)).add(a),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gGuardianPosY=.2,a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossEmissive=6,y.uniforms.gGuardianIteration=m(6,8,x(g(r,0,16))),y.uniforms.gGuardianIfsRotZ=.56,y.uniforms.gBossWingSpeed=.5})).then(264,(function(r,n){var e=new b(0,.01*r,0);t=new b(.4103258350034801,.5200795536137296,.666833121363178).add(b.fbm(r).scale(.001)).add(e),a=new b(.0342308810296187,.3259537491254461,.026786841137827717),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gGuardianPosY=.2,a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossEmissive=6,y.uniforms.gGuardianIteration=8,y.uniforms.gGuardianIfsRotZ=m(.56,.65,x(g(r,0,16)));var o=x(n);y.uniforms.gGuardianChargePosZ=.12*o,y.uniforms.gGuardianChargeRadius=.02*o,y.uniforms.gGuardianChargeBrightness=m(.4,1,o),y.uniforms.gBossWingSpeed=.5})).then(280,(function(r,n){var e=new b(0,0,.02*r);t=new b(1.4463773600031598,.6443200591994414,1.500070430410814).add(b.fbm(r).scale(.001)).add(e),a=new b(-.1665650796557814,.28390746403789546,.13058171330095478),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gBossPosY=.3,y.uniforms.gGuardianPosY=.2,a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossEmissive=6,y.uniforms.gGuardianIteration=8,y.uniforms.gGuardianIfsRotZ=.65,y.uniforms.gGuardianChargePosZ=.2,y.uniforms.gGuardianChargeRadius=m(.02,.05,n),y.uniforms.gGuardianChargeBrightness=m(1,1.5,n),y.uniforms.gBossWingSpeed=.5,y.uniforms.gCloudHeight=-.7})).then(296,(function(r,n){var e=new b(0,.01*r,0);t=new b(1.1679609279134675,.5089960588357236,-1.258965041135092).add(b.fbm(r).scale(.001)).add(e),a=new b(-.20079253570820935,.26694990675996494,.7545348681571291).add(e),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gBossPosY=.32,y.uniforms.gGuardianPosY=.2,a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossEmissive=6,y.uniforms.gGuardianIteration=8,y.uniforms.gGuardianIfsRotZ=.65,y.uniforms.gGuardianChargePosZ=.3,y.uniforms.gGuardianChargeRadius=m(.05,.1,n),y.uniforms.gGuardianChargeBrightness=1.5,y.uniforms.gBossWingSpeed=.5,y.uniforms.gCloudHeight=-.7})).then(312,(function(r,n){var e=new b(0,.01*r,0);t=new b(.896988194098362,.7322015336024654,2.344642480326849).add(b.fbm(r).scale(.001)).add(e),a=new b(-.4779126808898529,.05902671027996144,.36782234880991616).add(e),y.uniforms.gCameraFov=37,y.uniforms.gBossPosZ=1.46,y.uniforms.gBossPosY=.32,y.uniforms.gGuardianPosY=.2,a.y=y.uniforms.gGuardianPosY+.1,y.uniforms.gBossEmissive=6,y.uniforms.gGuardianIteration=8,y.uniforms.gGuardianIfsRotZ=.65,y.uniforms.gGuardianChargePosZ=.3,y.uniforms.gGuardianChargeRadius=m(.1,.2,n),y.uniforms.gGuardianChargeBrightness=1.5,y.uniforms.gBossWingSpeed=.5,y.uniforms.gCloudHeight=-.7})).then(328,(function(r,n){t=new b(.2255128681883477,.41599811240477513,1.9473740975834108).add(b.fbm(r).scale(.001)),a=new b(-.1030129773932712,.25904623564108065,1.0217582621717909),y.uniforms.gCameraFov=m(60,38,x(n)),y.uniforms.gBossPosZ=1.46,y.uniforms.gBossPosY=.32,y.uniforms.gGuardianPosY=.2,y.uniforms.gBossEmissive=2,y.uniforms.gGuardianIteration=8,y.uniforms.gGuardianIfsRotZ=.65,y.uniforms.gGuardianChargePosZ=.3,y.uniforms.gGuardianChargeRadius=r<8?m(.2,.3,x(r/8)):m(.3,0,x(p((r-8)/2))),y.uniforms.gGuardianChargeBrightness=1.5,y.uniforms.gGlitchIntensity=g(r,14,16)*p(Math.sin(4*r*Math.PI)),y.uniforms.gBossIfsOffsetX=m(1.79,5.79,Math.pow(p(v(r,8,16,0,1)),3)),y.uniforms.gFlash=g(r,12,13),y.uniforms.gFlashSpeed=30,y.uniforms.gBossWingSpeed=.5,y.uniforms.gCloudHeight=-.7})).then(344,(function(r,n){t=new b(.25941887099470284,.05360544026345058,-.5573098133260462).add(b.fbm(r).scale(1e-4)),a=new b(.1895955929649168,.06407429882707884,-.41725624859135374),y.uniforms.gCameraFov=m(50,60,n),y.uniforms.gGuardianPosY=0,y.uniforms.gCloudHeight=m(0,-.1,n)})).then(352,(function(r){var n=new b(-.01*r,0,0);t=new b(-1.3634260346223213,.3289286293461975,-3.8304745798817974).add(b.fbm(r).scale(.001)).add(n),a=new b(.7710197212562542,-.8374311636162176,2.688865312556434).add(t),y.uniforms.gCameraFov=38,y.uniforms.gGuardianPosY=0,y.uniforms.gCloudHeight=0})).then(360,(function(r,n){t=new b(4.056362816201517,1.4916691087030716,-3.846339729267867).add(b.fbm(r).scale(.001)),a=new b(.3083362310731234,-.10502872950562746,-.29008143765527644),t=new b(4.056362816201517,1.4916691087030716,-3.846339729267867).add(b.fbm(r).scale(.001)),a=new b(.3083362310731234,-.10502872950562746,-.29008143765527644),y.uniforms.gCameraFov=m(60,40,n),y.uniforms.gGuardianPosY=0,y.uniforms.gCloudHeight=.2})).then(368,(function(r,n){t=new b(.27407179394828574,.1213481921600677,.5182301731977972).add(b.fbm(r).scale(.002)),a=new b(.24758064643898853,.07899595887525789,.5541475614398711),y.uniforms.gCameraFov=35.10919999999959-r,y.uniforms.gBossIfsOffsetX=4.49,y.uniforms.gBossPosX=.1,y.uniforms.gBossPosY=-.045,y.uniforms.gBossPosZ=.48,y.uniforms.gBossEmissive=4*p(Math.sin(Math.PI*n)),y.uniforms.gBossWingSpeed=0,y.uniforms.gBlend=-g(r,3,4),y.uniforms.gGuardianPosY=0,y.uniforms.gCloudHeight=.3})).over((function(r){y.uniforms.gBlend=-1})),y.uniforms.gCameraEyeX=t.x,y.uniforms.gCameraEyeY=t.y,y.uniforms.gCameraEyeZ=t.z,y.uniforms.gCameraTargetX=a.x,y.uniforms.gCameraTargetY=a.y,y.uniforms.gCameraTargetZ=a.z}(n),!r&&n>y.timeLength+2&&(document.exitFullscreen(),r=!0)},y.init(),o.remove();var n=function(){var r=parseFloat(a.value);y.setSize(window.innerWidth*r,window.innerHeight*r)};window.addEventListener("resize",n),n(),setTimeout((function(){y.play(),y.playSound()}),2500)}),1e3)}))}}),!1)}]);