!function(n){var e={};function t(i){if(e[i])return e[i].exports;var o=e[i]={i:i,l:!1,exports:{}};return n[i].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,i){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:i})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var i=Object.create(null);if(t.r(i),Object.defineProperty(i,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(i,o,function(e){return n[e]}.bind(null,o));return i},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=10)}([function(n,e,t){"use strict";t.r(e),e.default="#version 300 es\n\ninvariant gl_Position;\nin vec2 vert2d;\n\nvoid main(void) { gl_Position = vec4(vert2d, 0, 1); }\n"},function(n,e,t){"use strict";t.r(e),e.default="#version 300 es\nprecision highp float;\nprecision highp int;\nprecision mediump sampler3D;\n\n// #define AA\n\nuniform vec3 iResolution;\nuniform float iTime;\nuniform sampler2D iPrevPass;\nuniform sampler2D iTextTexture;\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord);\n\nout vec4 outColor;\nvoid main(void) {\n    vec4 c;\n#ifdef AA\n    vec4 t;\n    c = vec4(0.0);\n    for (int y = 0; y < 2; y++) {\n        for (int x = 0; x < 2; x++) {\n            vec2 sub = vec2(float(x), float(y)) * 0.5;  // FIXME\n            vec2 uv = gl_FragCoord.xy + sub;\n            mainImage(t, uv);\n            c += 0.25 * t;\n        }\n    }\n#else\n    mainImage(c, gl_FragCoord.xy);\n#endif\n    outColor = c;\n}\n\n// consts\nconst float PI = 3.14159265359;\nconst float TAU = 6.28318530718;\nconst float PIH = 1.57079632679;\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\n// https://www.shadertoy.com/view/3tX3R4\nfloat clamp2(float x, float min, float max) { return (min < max) ? clamp(x, min, max) : clamp(x, max, min); }\nfloat remap(float val, float im, float ix, float om, float ox) { return clamp2(om + (val - im) * (ox - om) / (ix - im), om, ox); }\nfloat remapFrom(float val, float im, float ix) { return remap(val, im, ix, 0.0, 1.0); }  // TODO: optimize\nfloat remapTo(float val, float om, float ox) { return remap(val, 0.0, 1.0, om, ox); }    // TODO: optimize\nfloat easeInOutCubic(float t) { return t < 0.5 ? 4.0 * t * t * t : (t - 1.0) * (2.0 * t - 2.0) * (2.0 * t - 2.0) + 1.0; }\n\n// noise\n// https://www.shadertoy.com/view/4djSRW\nfloat hash11(float p) {\n    p = fract(p * .1031);\n    p *= p + 33.33;\n    p *= p + p;\n    return fract(p);\n}\n\nvec3 hash31(float p) {\n    vec3 p3 = fract(vec3(p) * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xxy + p3.yzz) * p3.zyx);\n}\n\nfloat hash12(vec2 p) {\n    vec3 p3 = fract(vec3(p.xyx) * .1031);\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.x + p3.y) * p3.z);\n}\n\nvec2 hash23(vec3 p3) {\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yzx + 33.33);\n    return fract((p3.xx + p3.yz) * p3.zy);\n}\n\nvec3 hash33(vec3 p3) {\n    p3 = fract(p3 * vec3(.1031, .1030, .0973));\n    p3 += dot(p3, p3.yxz + 33.33);\n    return fract((p3.xxy + p3.yxx) * p3.zyx);\n}\n\n// https://www.shadertoy.com/view/4dlGW2\n// Tileable Noise\nfloat hashScale(in vec2 p, in float scale) {\n    // This is tiling part, adjusts with the scale...\n    p = mod(p, scale);\n    return fract(sin(dot(p, vec2(27.16898, 38.90563))) * 5151.5473453);\n}\n\nfloat noise(in vec2 p, in float scale) {\n    vec2 f;\n\n    p *= scale;\n\n    f = fract(p);  // Separate integer from fractional\n    p = floor(p);\n\n    f = f * f * (3.0 - 2.0 * f);  // Cosine interpolation approximation\n\n    float res = mix(mix(hashScale(p, scale), hashScale(p + vec2(1.0, 0.0), scale), f.x), mix(hashScale(p + vec2(0.0, 1.0), scale), hashScale(p + vec2(1.0, 1.0), scale), f.x), f.y);\n    return res;\n}\n\nfloat fbm(in vec2 p, float scale) {\n    float f = 0.0;\n\n    p = mod(p, scale);\n    float amp = 0.6;\n\n    for (int i = 0; i < 5; i++) {\n        f += noise(p, scale) * amp;\n        amp *= .5;\n        // Scale must be multiplied by an integer value...\n        scale *= 2.;\n    }\n\n    return f;\n}\n\n// https://www.shadertoy.com/view/lsf3WH\n// Noise - value - 2D by iq\nfloat noise(in vec2 p) {\n    vec2 i = floor(p);\n    vec2 f = fract(p);\n    vec2 u = f * f * (3.0 - 2.0 * f);\n    return mix(mix(hash12(i + vec2(0.0, 0.0)), hash12(i + vec2(1.0, 0.0)), u.x), mix(hash12(i + vec2(0.0, 1.0)), hash12(i + vec2(1.0, 1.0)), u.x), u.y);\n}\n\nfloat fbm(in vec2 uv) {\n    float f = 0.0;\n    mat2 m = mat2(1.6, 1.2, -1.2, 1.6);\n    f = 0.5000 * noise(uv);\n    uv = m * uv;\n    f += 0.2500 * noise(uv);\n    uv = m * uv;\n    f += 0.1250 * noise(uv);\n    uv = m * uv;\n    f += 0.0625 * noise(uv);\n    uv = m * uv;\n    return f;\n}\n\nvec3 tap4(sampler2D tex, vec2 uv, vec2 texelSize) {\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    vec3 s;\n    s = texture(tex, uv + d.xy).rgb;\n    s += texture(tex, uv + d.zy).rgb;\n    s += texture(tex, uv + d.xw).rgb;\n    s += texture(tex, uv + d.zw).rgb;\n\n    return s * (1.0 / 4.0);\n}\n\nvec2 textUv(vec2 uv, float id, vec2 p, float scale) {\n    uv -= p;\n    uv /= scale;\n\n    float offset = 128.0 / 4096.0;\n    float aspect = 2048.0 / 4096.0;\n    uv.x = 0.5 + 0.5 * uv.x;\n    uv.y = 0.5 - 0.5 * (aspect * uv.y + 1.0 - offset);\n    uv.y = clamp(uv.y + offset * id, offset * id, offset * (id + 1.0));\n\n    return uv;\n}\n\n// Color\nvec3 hsv2rgb(vec3 c) {\n    vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);\n    return c.z * mix(K.xxx, saturate(p - K.xxx), c.y);\n}\n\n#define BPM 140.0\n#define beat (iTime * BPM / 60.0)\n"},function(n,e,t){"use strict";t.r(e),e.default="const float INF = 1e+10;\nconst float OFFSET = 0.1;\n\nuniform float gSceneEps;  // 0.002 0.00001 0.01\n#define SCENE_MANDEL 0.0\n#define SCENE_UNIVERSE 1.0\n\nuniform float gCameraEyeX;     // 0 -100 100 camera\nuniform float gCameraEyeY;     // 2.8 -100 100\nuniform float gCameraEyeZ;     // -8 -100 100\nuniform float gCameraTargetX;  // 0 -100 100\nuniform float gCameraTargetY;  // 2.75 -100 100\nuniform float gCameraTargetZ;  // 0 -100 100\nuniform float gCameraFov;      // 13 0 180\n\nuniform float gMandelboxScale;   // 2.7 1 5 mandel\nuniform float gMandelboxRepeat;  // 10 1 100\nuniform float gEdgeEps;          // 0.0005 0.0001 0.01\nuniform float gEdgePower;        // 1 0.1 10\nuniform float gBaseColor;        // 0.5\nuniform float gRoughness;        // 0.1\nuniform float gMetallic;         // 0.4\n\nstruct Ray {\n    vec3 origin;\n    vec3 direction;\n};\n\nstruct Camera {\n    vec3 eye, target;\n    vec3 forward, right, up;\n};\nCamera camera;\n\nRay cameraShootRay(Camera c, vec2 uv) {\n    c.forward = normalize(c.target - c.eye);\n    c.right = normalize(cross(c.forward, c.up));\n    c.up = normalize(cross(c.right, c.forward));\n\n    Ray r;\n    r.origin = c.eye;\n    r.direction = normalize(uv.x * c.right + uv.y * c.up + c.forward / tan(gCameraFov / 360.0 * PI));\n\n    return r;\n}\n\nstruct Intersection {\n    bool hit;\n    vec3 position;\n    float distance;\n    vec3 normal;\n    vec2 uv;\n    int count;\n\n    vec3 baseColor;\n    float roughness;\n    float reflectance;\n    float metallic;\n    vec3 emission;\n\n    vec3 color;\n};\n\n#define calcNormal(p, dFunc, eps)                                                                                                                                                 \\\n    normalize(vec2(eps, -eps).xyy *dFunc(p + vec2(eps, -eps).xyy) + vec2(eps, -eps).yyx * dFunc(p + vec2(eps, -eps).yyx) + vec2(eps, -eps).yxy * dFunc(p + vec2(eps, -eps).yxy) + \\\n              vec2(eps, -eps).xxx * dFunc(p + vec2(eps, -eps).xxx))\n\nfloat sdSphere(vec3 p, float r) { return length(p) - r; }\n\nfloat sdCapsule(vec3 p, vec3 a, vec3 b, float r) {\n    vec3 pa = p - a, ba = b - a;\n    float h = clamp(dot(pa, ba) / dot(ba, ba), 0.0, 1.0);\n    return length(pa - ba * h) - r;\n}\n\nmat2 rotate(float a) {\n    float c = cos(a), s = sin(a);\n    return mat2(c, s, -s, c);\n}\n\nfloat dMandelFast(vec3 p, float scale, int n) {\n    vec4 q0 = vec4(p, 1.0);\n    vec4 q = q0;\n\n    for (int i = 0; i < n; i++) {\n        // q.xz = mul(rotate(_MandelRotateXZ), q.xz);\n        q.xyz = clamp(q.xyz, -1.0, 1.0) * 2.0 - q.xyz;\n        q = q * scale / clamp(dot(q.xyz, q.xyz), 0.3, 1.0) + q0;\n    }\n\n    return length(q.xyz) / abs(q.w);\n}\n\nvec2 foldRotate(vec2 p, float s) {\n    float a = PI / s - atan(p.x, p.y);\n    float n = TAU / s;\n    a = floor(a / n) * n;\n    p = rotate(a) * p;\n    return p;\n}\n\nuniform float gFoldRotate;  // 1 0 20\n\nfloat dStage(vec3 p) {\n    float b = max(beat - 128.0, 0.0) + (p.z + 10.0);\n    p.xy = foldRotate(p.xy, gFoldRotate);\n    return dMandelFast(p, gMandelboxScale, int(gMandelboxRepeat));\n}\n\nfloat map(vec3 p) {\n    float d = dStage(p);\n    return d;\n}\n\n// https://www.shadertoy.com/view/lttGDn\nfloat calcEdge(vec3 p) {\n    float edge = 0.0;\n    vec2 e = vec2(gEdgeEps, 0);\n\n    // Take some distance function measurements from either side of the hit\n    // point on all three axes.\n    float d1 = map(p + e.xyy), d2 = map(p - e.xyy);\n    float d3 = map(p + e.yxy), d4 = map(p - e.yxy);\n    float d5 = map(p + e.yyx), d6 = map(p - e.yyx);\n    float d = map(p) * 2.;  // The hit point itself - Doubled to cut down on\n                            // calculations. See below.\n\n    // Edges - Take a geometry measurement from either side of the hit point.\n    // Average them, then see how much the value differs from the hit point\n    // itself. Do this for X, Y and Z directions. Here, the sum is used for the\n    // overall difference, but there are other ways. Note that it's mainly sharp\n    // surface curves that register a discernible difference.\n    edge = abs(d1 + d2 - d) + abs(d3 + d4 - d) + abs(d5 + d6 - d);\n    // edge = max(max(abs(d1 + d2 - d), abs(d3 + d4 - d)), abs(d5 + d6 - d)); //\n    // Etc.\n\n    // Once you have an edge value, it needs to normalized, and smoothed if\n    // possible. How you do that is up to you. This is what I came up with for\n    // now, but I might tweak it later.\n    edge = smoothstep(0., 1., sqrt(edge / e.x * 2.));\n\n    // Return the normal.\n    // Standard, normalized gradient mearsurement.\n    return edge;\n}\n\n// Thanks https://shadertoy.com/view/ttsGR4\nfloat revisionLogo(vec2 p, float rot) {\n    int[] pat = int[](0, ~0, 0x7C, 0xC0F03C00, 0xF7FBFF01, ~0, 0, 0x8320D39F, ~0, 0x1F0010, 0);\n    int r = clamp(int(20. * length(p)), 0, 10);\n    return float(pat[r] >> int(5.1 * atan(p.y, p.x) + 16. + (hash11(float(r * 1231)) - 0.5) * rot) & 1);\n}\n\nuniform float gEmissiveIntensity;     // 6.0 0 20 emissive\nuniform float gEmissiveSpeed;         // 1 0 2\nuniform float gEmissiveHue;           // 0.33947042613522904 0 1\nuniform float gEmissiveHueShiftBeat;  // 0 0 1\nuniform float gEmissiveHueShiftZ;     // 0 0 1\nuniform float gEmissiveHueShiftXY;    // 0 0 1\n\nuniform float gF0;                    // 0.95 0 1 lighting\nuniform float gCameraLightIntensity;  // 1 0 10\n\nfloat fresnelSchlick(float f0, float cosTheta) { return f0 + (1.0 - f0) * pow((1.0 - cosTheta), 5.0); }\n\nvoid intersectObjects(inout Intersection intersection, inout Ray ray) {\n    float d;\n    float distance = 0.0;\n    vec3 p = ray.origin;\n    float eps;\n\n    for (int i = 0; i < 300; i++) {\n        d = map(p);\n        distance += d;\n        p = ray.origin + distance * ray.direction;\n        intersection.count = i;\n        eps = gSceneEps * distance;\n        if (d < eps) break;\n    }\n\n    if (distance < intersection.distance) {\n        intersection.distance = distance;\n        intersection.hit = true;\n        intersection.position = p;\n        intersection.normal = calcNormal(p, map, gSceneEps);\n\n        intersection.baseColor = vec3(gBaseColor);\n        intersection.roughness = gRoughness;\n        intersection.metallic = gMetallic;\n\n        float edge = calcEdge(p);\n        float hue = gEmissiveHue + gEmissiveHueShiftZ * p.z + gEmissiveHueShiftXY * length(p.xy) + gEmissiveHueShiftBeat * beat;\n        intersection.emission = gEmissiveIntensity * hsv2rgb(vec3(hue, 0.8, 1.0)) * pow(edge, gEdgePower) * saturate(cos(beat * gEmissiveSpeed * TAU - mod(0.5 * intersection.position.z, TAU)));\n        intersection.reflectance = 0.0;\n    }\n}\n\nvoid intersectScene(inout Intersection intersection, inout Ray ray) {\n    intersection.distance = INF;\n    intersectObjects(intersection, ray);\n}\n\n#define FLT_EPS 5.960464478e-8\n\nfloat roughnessToExponent(float roughness) { return clamp(2.0 * (1.0 / (roughness * roughness)) - 2.0, FLT_EPS, 1.0 / FLT_EPS); }\n\nvec3 evalPointLight(inout Intersection i, vec3 v, vec3 lp, vec3 radiance) {\n    vec3 n = i.normal;\n    vec3 p = i.position;\n    vec3 ref = mix(vec3(0.04), i.baseColor, i.metallic);\n\n    vec3 l = lp - p;\n    float len = length(l);\n    l /= len;\n\n    vec3 h = normalize(l + v);\n\n    vec3 diffuse = mix(1.0 - ref, vec3(0.0), i.metallic) * i.baseColor / PI;\n    float m = roughnessToExponent(i.roughness);\n    vec3 specular = ref * pow(max(0.0, dot(n, h)), m) * (m + 2.0) / (8.0 * PI);\n    return (diffuse + specular) * radiance * max(0.0, dot(l, n)) / (len * len);\n}\n\nvec3 evalDirectionalLight(inout Intersection i, vec3 v, vec3 lightDir, vec3 radiance) {\n    vec3 n = i.normal;\n    vec3 p = i.position;\n    vec3 ref = mix(vec3(0.04), i.baseColor, i.metallic);\n\n    vec3 l = lightDir;\n    vec3 h = normalize(l + v);\n\n    vec3 diffuse = mix(1.0 - ref, vec3(0.0), i.metallic) * i.baseColor / PI;\n    float m = roughnessToExponent(i.roughness);\n    vec3 specular = ref * pow(max(0.0, dot(n, h)), m) * (m + 2.0) / (8.0 * PI);\n    return (diffuse + specular) * radiance * max(0.0, dot(l, n));\n}\n\n// http://www.fractalforums.com/new-theories-and-research/very-simple-formula-for-fractal-patterns/\nfloat fractal(vec3 p, int n) {\n    float strength = 7.0;\n    float accum = 0.25;\n    float prev = 0.;\n    float tw = 0.;\n    for (int i = 0; i < n; i++) {\n        float mag = dot(p, p);\n        p = abs(p) / mag + vec3(-.5, -.4, -1.5);\n        float w = exp(-float(i) / 7.);\n        accum += w * exp(-strength * pow(abs(mag - prev), 2.2));\n        tw += w;\n        prev = mag;\n    }\n    return max(0., 5. * accum / tw - .7);\n}\n\nvoid calcRadiance(inout Intersection intersection, inout Ray ray) {\n    intersection.hit = false;\n    intersectScene(intersection, ray);\n\n    if (intersection.hit) {\n        intersection.color = intersection.emission;\n        intersection.color += evalPointLight(intersection, -ray.direction, camera.eye, gCameraLightIntensity * vec3(80.0, 80.0, 100.0));\n\n        vec3 sunColor = vec3(2.0, 1.0, 1.0);\n        intersection.color += evalDirectionalLight(intersection, -ray.direction, vec3(-0.48666426339228763, 0.8111071056538127, 0.3244428422615251), sunColor);\n\n        // fog\n        // intersection.color = mix(intersection.color, vec3(0.01), 1.0 - exp(-0.01 * intersection.distance));\n    } else {\n        intersection.color = vec3(0.01);\n    }\n}\n\nuniform float gShockDistortion;    // 0 0 1 distortion\nuniform float gExplodeDistortion;  // 0 0 1\n\nvec2 distortion(vec2 uv) {\n    float l = length(uv);\n    // uv += 1.5 * uv * sin(l + beat * PIH);\n\n    uv += -gShockDistortion * uv * cos(l);\n\n    float explode = 30.0 * gExplodeDistortion * exp(-2.0 * l);\n    explode = mix(explode, 2.0 * sin(l + 10.0 * gExplodeDistortion), 10.0 * gExplodeDistortion);\n    uv += explode * uv;\n    return uv;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = (fragCoord * 2.0 - iResolution.xy) / min(iResolution.x, iResolution.y);\n    uv = distortion(uv);\n\n    camera.eye = vec3(gCameraEyeX, gCameraEyeY, gCameraEyeZ);\n    camera.target = vec3(gCameraTargetX, gCameraTargetY, gCameraTargetZ);\n    camera.up = vec3(0.0, 1.0, 0.0);  // y-up\n    Ray ray = cameraShootRay(camera, uv);\n\n    vec3 color = vec3(0.0);\n    vec3 reflection = vec3(1.0);\n    Intersection intersection;\n\n    for (int bounce = 0; bounce < 2; bounce++) {\n        calcRadiance(intersection, ray);\n        color += reflection * intersection.color;\n        if (!intersection.hit || intersection.reflectance == 0.0) break;\n\n        reflection *= intersection.reflectance;\n        ray.origin = intersection.position + intersection.normal * OFFSET;\n        vec3 l = reflect(ray.direction, intersection.normal);\n        reflection *= fresnelSchlick(gF0, dot(l, intersection.normal));\n        ray.direction = l;\n    }\n\n    fragColor = vec4(color, 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="uniform float gChromaticAberrationIntensity;  // 0.03 0 0.1 post\nuniform float gChromaticAberrationDistance;   // 0.45 0 1\n\nuniform float gVignetteIntensity;   // 1.34 0 3\nuniform float gVignetteSmoothness;  // 2 0 5\nuniform float gVignetteRoundness;   // 1 0 1\n\nuniform float gTonemapExposure;  // 0.1 0.0 2\nuniform float gFlash;            // 0 0 1\nuniform float gFlashSpeed;       // 0 0 60\nuniform float gBlend;            // 0 -1 1\n\nuniform float gGlitchIntensity;  // 0 0 0.1\nuniform float gXSfhitGlitch;     // 0 0 0.1\nuniform float gInvertRate;       // 0 0 1\n\nvec3 chromaticAberration(vec2 uv) {\n    uv.x += gXSfhitGlitch * (fbm(vec2(232.0 * uv.y, beat)) - 0.5);\n\n    vec2 d = abs(uv - 0.5);\n    float f = mix(0.5, dot(d, d), gChromaticAberrationDistance);\n    f *= f * gChromaticAberrationIntensity;\n    vec2 shift = vec2(f);\n\n    float a = 2.0 * hash11(beat) - 1.0;\n    vec2 grid = hash23(vec3(floor(vec2(uv.x * (4.0 + 8.0 * a), (uv.y + a) * 32.0)), beat));\n    grid = 2.0 * grid - 1.0;\n    shift += gGlitchIntensity * grid;\n\n    vec3 col;\n    col.r = texture(iPrevPass, uv + shift).r;\n    col.g = texture(iPrevPass, uv).g;\n    col.b = texture(iPrevPass, uv - shift).b;\n    return col;\n}\n\nfloat vignette(vec2 uv) {\n    vec2 d = abs(uv - 0.5) * gVignetteIntensity;\n    float roundness = (1.0 - gVignetteRoundness) * 6.0 + gVignetteRoundness;\n    d = pow(d, vec2(roundness));\n    return pow(saturate(1.0 - dot(d, d)), gVignetteSmoothness);\n}\n\nvec3 acesFilm(const vec3 x) {\n    const float a = 2.51;\n    const float b = 0.03;\n    const float c = 2.43;\n    const float d = 0.59;\n    const float e = 0.14;\n    return clamp((x * (a * x + b)) / (x * (c * x + d) + e), 0.0, 1.0);\n}\n\nvec3 invert(vec3 c, vec2 uv) {\n    if (hash12(vec2(floor(uv.y * gInvertRate * 32.0), beat)) < gInvertRate) {\n        return vec3(1.0) - c;\n    } else {\n        return c;\n    }\n}\n\nvec3 flash(vec3 c) {\n    c = mix(c, vec3(1.0), gFlash * saturate(cos(iTime * PI * gFlashSpeed)));\n    return c;\n}\n\nvec3 blend(vec3 c) {\n    c = mix(c, vec3(1.0), saturate(gBlend));\n    c = mix(c, vec3(0.0), saturate(-gBlend));\n    return c;\n}\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord / iResolution.xy;\n    vec3 col = chromaticAberration(uv);\n    col *= vignette(uv);\n    col = acesFilm(col * gTonemapExposure);\n    col = pow(col, vec3(1.0 / 2.2));\n    col = invert(col, uv);\n    col = flash(col);\n    col = blend(col);\n    fragColor = vec4(col, 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="float brightness(vec3 c) { return max(max(c.r, c.g), c.b); }\n\nuniform float gBloomThreshold;  // 1.0 0 100 bloom\nuniform float gBloomSoftKnee;   // 0.5 0 4\n\n// https://github.com/Unity-Technologies/PostProcessing/blob/v1/PostProcessing/Runtime/Components/BloomComponent.cs#L65-L67\n// https://github.com/Unity-Technologies/PostProcessing/blob/v1/PostProcessing/Resources/Shaders/Bloom.shader#L86-L117\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    float softKnee = gBloomSoftKnee;\n    float lthresh = gBloomThreshold;\n\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec4 color = texture(iPrevPass, uv);\n    vec3 m = color.rgb;\n    float br = brightness(m);\n\n    float knee = lthresh * softKnee + 1e-5;\n    vec3 curve = vec3(lthresh - knee, knee * 2.0, 0.25 / knee);\n    float rq = clamp(br - curve.x, 0.0, curve.y);\n    rq = curve.z * rq * rq;\n\n    m *= max(rq, br - lthresh) / max(br, 1e-5);\n    m = max(m, vec3(0.0));\n\n    fragColor = vec4(m, color.a);\n}"},function(n,e,t){"use strict";t.r(e),e.default="void mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    fragColor = vec4(tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="uniform sampler2D iBeforeBloom;\nuniform sampler2D iPairBloomDown;\n\nuniform float gBloomSpread;  // 1.3 1 2\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec3 col = texture(iPairBloomDown, uv).rgb;\n    fragColor = vec4(col + gBloomSpread * tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="uniform sampler2D iBeforeBloom;\nuniform sampler2D iPairBloomDown;\n\nuniform float gBloomIntensity;  // 1 0 30\n\nvoid mainImage(out vec4 fragColor, in vec2 fragCoord) {\n    vec2 uv = fragCoord.xy / iResolution.xy;\n    vec2 texelSize = 1.0 / iResolution.xy;\n    vec3 col = texture(iBeforeBloom, uv).rgb;\n    vec3 pair = texture(iPairBloomDown, uv).rgb;\n    fragColor = vec4(col + gBloomIntensity * tap4(iPrevPass, uv, texelSize), 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="#version 300 es\nprecision mediump float;\nuniform float iSampleRate;\nuniform float iBlockOffset;\n\nvec2 mainSound(float time);\n\nout vec4 outColor;\nvoid main() {\n    float t = iBlockOffset + ((gl_FragCoord.x - 0.5) + (gl_FragCoord.y - 0.5) * 512.0) / iSampleRate;\n    vec2 y = mainSound(t);\n    vec2 v = floor((0.5 + 0.5 * y) * 65536.0);\n    vec2 vl = mod(v, 256.0) / 255.0;\n    vec2 vh = floor(v / 256.0) / 255.0;\n    outColor = vec4(vl.x, vh.x, vl.y, vh.y);\n}\n\n//--------------------\n// ここから下を書き換える\n//--------------------\n#define BPM 140.0\n#define PI 3.141592654\n#define TAU 6.283185307\n\nfloat sidechain;\nfloat sidechain2;\nfloat sidechain3;\nfloat sidechain4;\nfloat sidechain5;\n\n// general functions\nfloat timeToBeat(float t) { return t / 60.0 * BPM; }\nfloat beatToTime(float b) { return b / BPM * 60.0; }\nfloat noteToFreq(float n) { return 440.0 * pow(2.0, (n - 69.0) / 12.0); }\n\n// https://www.shadertoy.com/view/4djSRW\nvec4 noise(float p) {\n    vec4 p4 = fract(vec4(p) * vec4(.1050, .1030, .0973, .1099));\n    p4 += dot(p4, p4.wzxy + 55.33);\n    return fract((p4.xxyz + p4.yzzw) * p4.zywx);\n}\n\n// quantize https://www.shadertoy.com/view/ldfSW2\nfloat quan(float s, float c) { return floor(s / c) * c; }\n\n// hash\nfloat nse(float x) {\n    return fract(sin(x * 110.082) * 19871.8972);\n    // return fract(sin(x * 110.082) * 13485.8372);\n}\n\nfloat dist(float s, float d) { return clamp(s * d, -1.0, 1.0); }\n\n// primitive oscillators\nfloat sine(float phase) { return sin(TAU * phase); }\nfloat saw(float phase) { return 2.0 * fract(phase) - 1.0; }\nfloat square(float phase) { return fract(phase) < 0.5 ? -1.0 : 1.0; }\nfloat tri(float phase) { return abs(2. * fract(phase * .5 - .25) - 1.) * 2. - 1.; }\n\n// drums\nfloat kick(float note, float time) {\n    float amp = exp(-3.2 * time);\n    float phase = 35.0 * time - 16.0 * exp(-60.0 * time);\n    return amp * sine(phase);\n}\n\nvec2 hihat(float note, float time) {\n    float amp = exp(-50.0 * time);\n    return amp * noise(time * 100.0).xy;\n}\n\nvec2 hihat2(float note, float time) {\n    float amp = exp(-70.0 * time);\n    return amp * noise(time * 300.0).xy;\n}\n\nvec2 hihat3(float note, float time) {\n    float amp = exp(-50.0 * time);\n    float phase = 200.0 * time - 300.0 * exp(-40.0 * time);\n    return amp * noise(time * 300.0).xy;\n}\n\n// https://www.shadertoy.com/view/ldfSW2\nvec2 crash1(float note, float time) {\n    {\n        // tb = fract(tb / 4.0) * 0.5;\n        float aa = 15.0;\n        time = sqrt(time * aa) / aa;\n        float amp = exp(max(time - 0.15, 0.0) * -5.0);\n        float v = nse(quan(mod(time, 0.6), 0.0001));\n        v = dist(v, 0.1) * amp;\n        return vec2(dist(v * amp, 2.0));\n    }\n}\n\n// synths\nvec2 bass(float note, float time) {\n    float freq = noteToFreq(note);\n    return vec2(saw(freq * time) + sine(freq * time)) / 1.5;\n}\n\nvec2 subbass(float note, float time) {\n    float freq = noteToFreq(note);\n    return vec2(sine(freq * time)) / 2.0;\n}\n\nvec2 arp(float note, float time) {\n    float freq = noteToFreq(note);\n    float fmamp = 0.1 * exp(-30.0 * time);\n    float fm = fmamp * square(time * freq * 1.5);\n    float amp = exp(-50.0 * time);\n    return amp * vec2(square(freq * time), tri(freq * time));\n}\n\nvec2 arpsaw(float note, float time) {\n    float freq = noteToFreq(note);\n    float fmamp = 0.02 * exp(-30.0 * time);\n    float fm = fmamp * sine(time * freq * 1.0);\n    float amp = exp(-20.0 * time);\n    return amp * vec2(sine(freq * 0.999 * time + fm), saw(freq * 1.001 * time + fm));\n}\n\nvec2 arpsine(float note, float time) {\n    float freq = noteToFreq(note);\n    float fmamp = 0.02 * exp(-70.0 * time);\n    float fm = fmamp * sine(time * freq * 1.0);\n    float amp = exp(-50.0 * time);\n    return amp * vec2(sine(freq * 0.999 * time + fm), sine(freq * 1.001 * time + fm));\n}\n\nvec2 arpsine2(float note, float time) {\n    float freq = noteToFreq(note);\n    float fmamp = 0.02 * exp(-30.0 * time);\n    float fm = fmamp * sine(time * freq * 1.0);\n    float amp = exp(-30.0 * time);\n    return amp * vec2(sine(freq * 0.999 * time + fm), sine(freq * 1.001 * time + fm));\n}\n\nvec2 supersaw(float note, float time) {\n    float amp = exp(0.0 * time * time);\n    float vib = 0.2 * sine(3.0 * time);\n    float ret = 0.0;\n    int num = 3;\n    float step = 0.014;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time - 0.008 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-3.0 * float(j));\n        }\n    }\n\n    return vec2(0.5 * amp * ret / float(num));\n}\n\nvec2 basssaw1(float note, float time) {\n    float amp = exp(15.0 * time * time);\n    float ret = 0.0;\n    int num = 2;\n    float step = 0.014;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time - 0.008 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-3.0 * float(j));\n        }\n    }\n\n    return vec2(0.5 * amp * ret / float(num));\n}\n\nvec2 basssaw2(float note, float time) {\n    float amp = exp(15.0 * time * time);\n    float ret = 0.0;\n    int num = 2;\n    float step = 0.014;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time - 0.008 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-3.0 * float(j));\n        }\n    }\n\n    return vec2(0.5 * amp * ret / float(num));\n}\n\nvec2 basssaw3(float note, float time) {\n    float amp = exp(1.3 * time * time);\n    float ret = 0.0;\n    int num = 3;\n    float step = 0.014;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time - 0.008 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-3.0 * float(j));\n        }\n    }\n\n    return vec2(0.5 * amp * ret / float(num));\n}\n\nvec2 chordsaw1(float note, float time) {\n    float amp = exp(0.0 * time * time);\n    float env = exp(time * 4.0);\n    float ret = 0.0;\n    int num = 3;\n    float step = 0.023;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time - 0.019 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-3.0 * float(j));\n        }\n    }\n\n    return vec2(0.4 * amp * ret / float(num));\n}\n\nvec2 chordsaw2(float note, float time) {\n    float amp = exp(0.0 * time * time);\n    float env = exp(time * 3.0);\n    float ret = 0.0;\n    int num = 3;\n    float step = 0.0225;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time + 0.019 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-2.0 * float(j));\n        }\n    }\n\n    return vec2(0.4 * env * amp * ret / float(num));\n}\n\nvec2 chordsquare1(float note, float time) {\n    float amp = exp(-15.0 * time * time);\n    float ret = 0.0;\n    int num = 3;\n    float step = 0.023;\n    int reverbNum = 100;\n\n    for (int i = 0; i < num; i++) {\n        float freq = noteToFreq(note + 12.0 * float(i - num / 2));\n        for (int j = 0; j < reverbNum; j++) {\n            ret += saw(freq * (time + 0.019 * float(j)) * (1.0 + step * float(i - num / 2))) * exp(-3.0 * float(j));\n        }\n    }\n\n    return vec2(0.5 * amp * ret / float(num));\n}\n\n#define NSPC 256\n\n// hard clipping distortion\n// float dist(float s, float d) { return clamp(s * d, -1.0, 1.0); }\nvec2 dist(vec2 s, float d) { return clamp(s * d, -1.0, 1.0); }\n\n// my resonant lowpass filter's frequency response\nfloat _filter(float h, float cut) {\n    cut -= 20.0;\n    float df = max(h - cut, 0.0), df2 = abs(h - cut);\n    return exp(-0.005 * df * df) * 0.5 + exp(df2 * df2 * -0.1) * 2.2;\n}\n\n// tb303 core\nvec2 synth(float note, float t) {\n    vec2 v = vec2(0.0);\n    float dr = 0.15;\n    float amp = smoothstep(0.1, 0.0, abs(t - dr - 0.1) - dr) * exp(t * 0.2);\n    float f = noteToFreq(note);\n    float sqr = 0.1;  // smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n\n    float base = f;                    // 50.0 + sin(sin(t * 0.1) * t) * 20.0;\n    float flt = exp(t * -1.5) * 30.0;  // + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n    for (int i = 0; i < NSPC; i++) {\n        float h = float(i + 1);\n        float inten = 2.0 / h;\n        // inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\n        inten = mix(inten, inten * mod(h, 2.0), sqr);\n\n        inten *= exp(-2.0 * max(2.0 - h, 0.0));  // + exp(abs(h - flt) * -2.0) * 8.0;\n\n        inten *= _filter(h, flt);\n\n        v.x += inten * sin((TAU + 0.01) * (t * base * h));\n        v.y += inten * sin(TAU * (t * base * h));\n    }\n\n    float o = v.x * amp;  // exp(max(tnote - 0.3, 0.0) * -5.0);\n\n    // o = dist(o, 2.5);\n\n    return vec2(dist(v * amp, 2.0));\n}\n\nvec2 synth1_echo(float note, float time) {\n    vec2 v;\n    v = synth(note, time) * 0.5;  // + synth2(time) * 0.5;\n    float ec = 0.4, fb = 0.3, et = 2.0 / 9.0, tm = 2.0 / 9.0;\n    v += synth(note, time - et) * ec * vec2(1.0, 0.5);\n    ec *= fb;\n    et += tm;\n    v += synth(note, time - et).yx * ec * vec2(0.5, 1.0);\n    ec *= fb;\n    et += tm;\n    v += synth(note, time - et) * ec * vec2(1.0, 0.5);\n    ec *= fb;\n    et += tm;\n    v += synth(note, time - et).yx * ec * vec2(0.5, 1.0);\n    ec *= fb;\n    et += tm;\n\n    return v;\n}\n\nvec2 attackbass(float note, float t) {\n    vec2 v = vec2(0.0);\n    float dr = 0.15;\n    float amp = smoothstep(0.1, 0.0, abs(t - dr - 0.1) - dr) * exp(t * 0.2);\n    float f = noteToFreq(note);\n    float sqr = 0.1;  // smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n\n    float base = f;                    // 50.0 + sin(sin(t * 0.1) * t) * 20.0;\n    float flt = exp(t * -1.5) * 30.0;  // + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n    for (int i = 0; i < NSPC; i++) {\n        float h = float(i + 1);\n        float inten = 2.0 / h;\n        // inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\n        inten = mix(inten, inten * mod(h, 2.0), sqr);\n\n        inten *= exp(-2.0 * max(2.0 - h, 0.0));  // + exp(abs(h - flt) * -2.0) * 8.0;\n\n        inten *= _filter(h, flt);\n\n        v.x += inten * sin((TAU + 0.01) * (t * base * h));\n        v.y += inten * sin(TAU * (t * base * h));\n    }\n\n    float o = v.x * amp;  // exp(max(tnote - 0.3, 0.0) * -5.0);\n\n    // o = dist(o, 2.5);\n\n    return vec2(dist(v * amp, 2.0));\n}\n\nvec2 leadsub(float note, float t) {\n    vec2 v = vec2(0.0);\n    float dr = 0.1;\n    float amp = smoothstep(0.2, 0.0, abs(t - dr - 0.1) - dr) * exp(t * 0.2);\n    float f = noteToFreq(note);\n    float sqr = 0.03;  // smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n\n    float base = f;                    // 50.0 + sin(sin(t * 0.1) * t) * 20.0;\n    float flt = exp(t * -3.5) * 20.0;  // + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n    for (int i = 0; i < NSPC; i++) {\n        float h = float(i + 1);\n        float inten = 2.0 / h;\n        // inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\n        inten = mix(inten, inten * mod(h, 2.0), sqr);\n\n        inten *= exp(-2.0 * max(2.0 - h, 0.0));  // + exp(abs(h - flt) * -2.0) * 8.0;\n\n        inten *= _filter(h, flt);\n\n        v.x += inten * sin((TAU + 0.01) * (t * base * h));\n        v.y += inten * sin(TAU * (t * base * h));\n    }\n\n    float o = v.x * amp;  // exp(max(tnote - 0.3, 0.0) * -5.0);\n\n    // o = dist(o, 2.5);\n\n    return vec2(dist(v * amp, 2.0));\n}\n\nvec2 leadsub2(float note, float t) {\n    vec2 v = vec2(0.0);\n    float dr = 0.1;\n    float amp = smoothstep(0.2, 0.0, abs(t - dr - 0.1) - dr) * exp(t * 0.2);\n    float f = noteToFreq(note);\n    float sqr = 0.05;  // smoothstep(0.0, 0.01, abs(mod(t * 9.0, 64.0) - 20.0) - 20.0);\n\n    float base = f;                    // 50.0 + sin(sin(t * 0.1) * t) * 20.0;\n    float flt = exp(t * -2.5) * 20.0;  // + pow(cos(t * 1.0) * 0.5 + 0.5, 4.0) * 80.0 - 0.0;\n    for (int i = 0; i < NSPC; i++) {\n        float h = float(i + 1);\n        float inten = 4.0 / h;\n        // inten *= sin((pow(h, sin(t) * 0.5 + 0.5) + t * 0.5) * pi2) * 0.9 + 0.1;\n\n        inten = mix(inten, inten * mod(h, 2.0), sqr);\n\n        inten *= exp(-3.0 * max(1.9 - h, 0.0));  // + exp(abs(h - flt) * -2.0) * 8.0;\n\n        inten *= _filter(h, flt);\n\n        v.x += inten * sin((TAU + 0.01) * (t * base * h));\n        v.y += inten * sin(TAU * (t * base * h));\n    }\n\n    float o = v.x * amp;  // exp(max(tnote - 0.3, 0.0) * -5.0);\n\n    // o = dist(o, 2.5);\n\n    return vec2(dist(v * amp, 2.0));\n}\n\n// https://www.shadertoy.com/view/4sSSWz\nfloat noise2(float phi) { return fract(sin(phi * 0.055753) * 122.3762) * 4.0 - 3.0; }\n\nvec2 snare(float note, float t) {\n    float i = t * iSampleRate;\n    float env = exp(-t * 17.0);\n    float v = 0.3 * env * (2.3 * noise2(i) + 0.5 * sin(30.0 * i));\n    return vec2(v);\n}\n\nvec2 snarefill(float note, float t) {\n    float i = t * iSampleRate;\n    float env = exp(-t * 30.0);\n    float v = 0.2 * env * (2.3 * noise2(i) + 0.5 * sin(30.0 * i));\n    return vec2(v);\n}\n\nvec2 noisefeedin(float note, float t) {\n    float i = t * iSampleRate;\n    float env = exp(-t * 1.0);\n    float v = 0.05 * env * (3.3 * noise2(i) + 0.5 * sin(30.0 * i));\n    return vec2(v);\n}\n\nvec2 sidechainnoise(float note, float t) {\n    float i = t * iSampleRate;\n    float env = exp(-t * 3.0);\n    float v = 0.03 * env * (3.3 * noise2(i) + 0.3 * sin(20.0 * i));\n    return vec2(v);\n}\n\nvec2 sidechainnoise2(float note, float t) {\n    float i = t * iSampleRate;\n    float env = exp(-t * 3.0);\n    float v = 0.1 * env * (3.3 * noise2(i) + 0.3 * sin(20.0 * i));\n    return vec2(v);\n}\n\nvec2 kickattack(float note, float t) {\n    float i = t * iSampleRate;\n    float env = exp(-t * 28.0);\n    float v = 0.5 * env * (0.7 * noise2(i) + 0.38 * sin(45.0 * i));\n    return vec2(v);\n}\n\n// 1ビートを最大何分割するか。16分音符に対応するなら4\n#define NOTE_VDIV 4\n\n// 1ビートのpackingを考慮した分割数。32bitのintに16bitずつ詰めているので 4 / (32 / 16) = 2\n#define NOTE_DIV 2\n\n// 展開用の配列のpacking数。32bitのintに4bitずつ詰めているので 32 / 4 = 8\n#define DEV_PACK 8\n\n#define MAX_BEAT_LEN 8\nint[MAX_BEAT_LEN * NOTE_VDIV] tmpIndexes;\n\n#define O(a)                                                                                                                                                                                 \\\n    (a | 1 << 8) | ((a | 1 << 8) << 16), (a | 1 << 8) | ((a | 1 << 8) << 16), (a | 1 << 8) | ((a | 1 << 8) << 16), (a | 1 << 8) | ((a | 1 << 8) << 16), (a | 1 << 8) | ((a | 1 << 8) << 16), \\\n        (a | 1 << 8) | ((a | 1 << 8) << 16), (a | 1 << 8) | ((a | 1 << 8) << 16), (a | 1 << 8) | ((a | 1 << 8) << 16)\n#define F(a) (a | 4 << 8) | ((a | 4 << 8) << 16), (a | 4 << 8) | ((a | 4 << 8) << 16)\n#define E(a, b) (a | 8 << 8) | ((a | 8 << 8) << 16), (b | 8 << 8) | ((b | 8 << 8) << 16)\n#define S(a, b, c, d) (a | 16 << 8) | ((b | 16 << 8) << 16), (c | 16 << 8) | ((d | 16 << 8) << 16)\n#define D(a, b, c, d, e, f, g, h) (a) | (b << 4) | (c << 8) | (d << 12) | (e << 16) | (f << 20) | (g << 24) | (h << 28)\n\n#define SEQUENCER(beat, time, beatLen, devPat, devLen, notes, development, toneFunc)                     \\\n    int indexOffset = development[int(mod(beat / float(beatLen * DEV_PACK), float(devLen / DEV_PACK)))]; \\\n    indexOffset = (indexOffset >> (4 * int(mod(beat / float(beatLen), float(DEV_PACK))))) & 15;          \\\n    indexOffset *= beatLen * NOTE_VDIV;                                                                  \\\n                                                                                                         \\\n    for (int i = 0; i < beatLen * NOTE_VDIV;) {                                                          \\\n        int index = i + indexOffset;                                                                     \\\n        int shift = (index % 2 == 1) ? 16 : 0;                                                           \\\n        int div = ((notes[index >> 1] >> shift) >> 8) & 255;                                             \\\n        int len = NOTE_VDIV * NOTE_VDIV / div;                                                           \\\n        for (int j = 0; j < len; j++) {                                                                  \\\n            tmpIndexes[i + j] = i;                                                                       \\\n        }                                                                                                \\\n        i += len;                                                                                        \\\n    }                                                                                                    \\\n                                                                                                         \\\n    float indexFloat = mod(beat * float(NOTE_VDIV), float(beatLen * NOTE_VDIV));                         \\\n    int index = int(indexFloat);                                                                         \\\n    int shift = (index % 2 == 1) ? 16 : 0;                                                               \\\n    int note = (notes[(index + indexOffset) >> 1] >> shift) & 255;                                       \\\n    float localTime = beatToTime((indexFloat - float(tmpIndexes[index])) / float(NOTE_VDIV));            \\\n    float amp = (note == 0) ? 0.0 : 1.0;                                                                 \\\n    vec2 ret = vec2(toneFunc(float(note), localTime) * amp);\n\n//  KICK  //\n\nvec2 kick1(float beat, float time) {\n// 1つの展開のビート数\n#define KICK1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define KICK1_DEV_PAT 4\n\n// 展開の長さ\n#define KICK1_DEV_LEN 32\n\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[KICK1_BEAT_LEN * NOTE_DIV * KICK1_DEV_PAT] notes = int[](\n        // 展開0\n        F(1), F(0), F(0), E(0, 1), F(1), F(0), F(0), F(1),\n\n        // 展開1\n        F(1), F(1), F(1), F(1), F(1), F(1), F(1), F(1),\n\n        // 展開2\n        F(1), F(1), F(1), F(1), F(1), F(1), F(1), F(0),\n\n        // 展開3\n        F(1), F(1), F(1), F(1), F(0), F(0), F(0), F(0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[KICK1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 3));\n\n    SEQUENCER(beat, time, KICK1_BEAT_LEN, KICK1_DEV_PAT, KICK1_DEV_LEN, notes, development, kick)\n\n    sidechain = smoothstep(-0.1, 0.6, localTime);\n    sidechain2 = smoothstep(-0.1, 0.7, localTime);\n    sidechain3 = smoothstep(-0.2, 0.7, localTime);\n    sidechain4 = smoothstep(-0.3, 0.8, localTime);\n    sidechain5 = smoothstep(0.0, 0.2, localTime);\n\n    return ret;\n}\n\nvec2 kick2(float beat, float time) {\n// 1つの展開のビート数\n#define KICK2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define KICK2_DEV_PAT 3\n\n// 展開の長さ\n#define KICK2_DEV_LEN 32\n\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[KICK2_BEAT_LEN * NOTE_DIV * KICK2_DEV_PAT] notes = int[](\n        // 展開0\n        F(1), F(0), F(0), E(0, 1), F(1), F(0), F(0), F(1),\n\n        // 展開1\n        F(1), F(1), F(1), F(1), F(1), F(1), F(1), F(1),\n\n        // 展開2\n        O(0), O(0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[KICK2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(2, 2, 2, 2, 2, 2, 2, 2));\n\n    SEQUENCER(beat, time, KICK2_BEAT_LEN, KICK2_DEV_PAT, KICK2_DEV_LEN, notes, development, kickattack)\n\n    return ret;\n}\n\nvec2 crashcymbal1(float beat, float time) {\n// 1つの展開のビート数\n#define CRASH1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CRASH1_DEV_PAT 3\n\n// 展開の長さ\n#define CRASH1_DEV_LEN 32\n\n    int[CRASH1_BEAT_LEN * NOTE_DIV * CRASH1_DEV_PAT] notes = int[](\n        // 展開0\n        O(1), O(0),\n\n        // 展開1\n        O(0), O(0),\n\n        // 展開2\n        F(1), F(0), F(0), F(0), F(1), F(0), F(0), F(0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[CRASH1_DEV_LEN / DEV_PACK] development = int[](D(0, 1, 1, 1, 0, 1, 2, 2), D(0, 1, 1, 1, 0, 1, 2, 2), D(0, 1, 1, 1, 0, 1, 1, 1), D(0, 1, 1, 1, 0, 1, 1, 1));\n\n    SEQUENCER(beat, time, CRASH1_BEAT_LEN, CRASH1_DEV_PAT, CRASH1_DEV_LEN, notes, development, crash1)\n\n    return ret;\n}\n\nvec2 crashcymbal2(float beat, float time) {\n// 1つの展開のビート数\n#define CRASH1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CRASH1_DEV_PAT 3\n\n// 展開の長さ\n#define CRASH1_DEV_LEN 32\n\n    int[CRASH1_BEAT_LEN * NOTE_DIV * CRASH1_DEV_PAT] notes = int[](\n        // 展開0\n        O(1), O(0),\n\n        // 展開1\n        O(0), O(0),\n\n        // 展開2\n        F(0), F(0), F(1), F(0), F(0), F(0), F(1), F(0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[CRASH1_DEV_LEN / DEV_PACK] development = int[](D(1, 1, 0, 1, 1, 0, 2, 2), D(1, 1, 1, 1, 1, 0, 2, 2), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1));\n\n    SEQUENCER(beat, time, CRASH1_BEAT_LEN, CRASH1_DEV_PAT, CRASH1_DEV_LEN, notes, development, crash1)\n\n    return ret;\n}\n\n//   BASS   //\n\nvec2 bass1(float beat, float time) {\n// 1つの展開のビート数\n#define BASS1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define BASS1_DEV_PAT 11\n\n// 展開の長さ\n#define BASS1_DEV_LEN 32\n\n    int[BASS1_BEAT_LEN * NOTE_DIV * BASS1_DEV_PAT] notes = int[](\n        // 展開0\n        F(0), F(33), E(0, 33), S(0, 33, 0, 33), F(0), F(33), E(0, 33), S(0, 33, 0, 33),\n\n        // 展開1\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),\n\n        // 展開2\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(48, 47, 43, 40),\n\n        // 展開3\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34),\n\n        // 展開4\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 36, 36, 36),\n\n        // 展開5\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34), S(0, 36, 36, 36),\n\n        // 展開6\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 43, 43, 43), S(0, 55, 57, 69),\n\n        // 展開7\n        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45), E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31),\n\n        // 展開8\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 43, 45, 57),\n\n        // 展開9\n        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45), E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(0, 31, 31, 31),\n\n        // 展開10\n        F(0), F(33), E(0, 33), S(0, 33, 0, 33), F(0), F(33), F(0), F(0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[BASS1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 3, 4, 5, 6), D(7, 0, 7, 8, 7, 0, 9, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, BASS1_BEAT_LEN, BASS1_DEV_PAT, BASS1_DEV_LEN, notes, development, bass)\n    return ret;\n}\n\nvec2 bass2(float beat, float time) {\n// 1つの展開のビート数 ベースのアタック\n#define BASS2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define BASS2_DEV_PAT 11\n\n// 展開の長さ\n#define BASS2_DEV_LEN 32\n\n    int[BASS2_BEAT_LEN * NOTE_DIV * BASS2_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),\n\n        // 展開2\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(41, 41), S(0, 41, 41, 41), S(0, 43, 43, 43), F(0),\n\n        // 展開3\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),\n\n        // 展開4\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34),\n\n        // 展開5\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 36, 36, 36),\n\n        // 展開6\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34), S(0, 36, 36, 36),\n\n        // 展開7\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 43, 43, 43), S(0, 55, 57, 69),\n\n        // 展開8\n        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45), E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31),\n\n        // 展開9\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 43, 45, 57),\n\n        // 展開10\n        E(29, 29), S(0, 29, 29, 29), S(0, 29, 29, 29), S(0, 31, 33, 45), E(29, 29), S(0, 29, 29, 29), S(0, 31, 31, 31), S(0, 31, 31, 31));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[BASS2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 4, 5, 6, 7), D(8, 1, 8, 9, 8, 1, 10, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, BASS2_BEAT_LEN, BASS2_DEV_PAT, BASS2_DEV_LEN, notes, development, attackbass)\n    return ret;\n}\n\nvec2 bass3(float beat, float time) {\n    if (beat < 64.0) return vec2(0.0);\n    return basssaw3(33.0, beatToTime(mod(beat, 4.0)));\n}\n\nvec2 sideSupersaw1(float beat, float time) {\n// 1つの展開のビート数\n#define TAMESHI_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define TAMESHI_DEV_PAT 7\n\n// 展開の長さ\n#define TAMESHI_DEV_LEN 32\n\n    int[TAMESHI_BEAT_LEN * NOTE_DIV * TAMESHI_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45),\n\n        // 展開2\n        E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), E(41, 41), S(0, 41, 41, 41), S(0, 43, 43, 43), F(0),\n\n        // 展開3\n        E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 46, 46, 46),\n\n        // 展開4\n        E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 48, 48, 48),\n\n        // 展開5\n        E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), E(45, 45), S(0, 45, 45, 45), S(0, 46, 46, 46), S(0, 48, 48, 48),\n\n        // 展開6\n        E(45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), S(0, 45, 45, 45), E(45, 45), S(0, 45, 45, 45), S(0, 55, 55, 55), S(0, 0, 0, 0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[TAMESHI_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 3, 4, 5, 6), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, TAMESHI_BEAT_LEN, TAMESHI_DEV_PAT, TAMESHI_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 sideSupersaw2(float beat, float time) {\n// 1つの展開のビート数\n#define TAMESHI_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define TAMESHI_DEV_PAT 7\n\n// 展開の長さ\n#define TAMESHI_DEV_LEN 32\n\n    int[TAMESHI_BEAT_LEN * NOTE_DIV * TAMESHI_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33),\n\n        // 展開2\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(29, 29), S(0, 31, 31, 31), S(0, 31, 31, 31), S(0, 31, 31, 31),\n\n        // 展開3\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34),\n\n        // 展開4\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 36, 36, 36),\n\n        // 展開5\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 34, 34, 34), S(0, 36, 36, 36),\n\n        // 展開6\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 43, 43, 43), S(0, 55, 57, 69));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[TAMESHI_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 2, 3, 4, 5, 6), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, TAMESHI_BEAT_LEN, TAMESHI_DEV_PAT, TAMESHI_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 tb303synth(float beat, float time) {\n// 1つの展開のビート数\n#define TB303SYNTH1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define TB303SYNTH1_DEV_PAT 2\n\n// 展開の長さ\n#define TB303SYNTH1_DEV_LEN 32\n\n    int[TB303SYNTH1_BEAT_LEN * NOTE_DIV * TB303SYNTH1_DEV_PAT] notes = int[](\n        // 展開0\n        F(33), F(33), F(33), F(33), F(33), F(33), F(33), F(33),\n\n        // 展開1\n        E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), E(33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33), S(0, 33, 33, 33));\n\n    // 展開\n    int[TB303SYNTH1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, TB303SYNTH1_BEAT_LEN, TB303SYNTH1_DEV_PAT, TB303SYNTH1_DEV_LEN, notes, development, synth)\n    return ret;\n}\n\nvec2 arp0(float beat, float time) {\n    if (beat >= 64.0 && beat < 192.0) return vec2(0.0);\n\n// 1つの展開のビート数\n#define ARP0_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP0_DEV_PAT 2\n\n// 展開の長さ\n#define ARP0_DEV_LEN 8\n\n    int[ARP0_BEAT_LEN * NOTE_DIV * ARP0_DEV_PAT] notes = int[](\n        // 展開0\n        S(57, 57, 59, 59), S(60, 60, 64, 64), S(67, 67, 69, 69), S(71, 71, 74, 74), S(57, 57, 59, 59), S(60, 60, 64, 64), S(67, 67, 69, 69), S(71, 71, 74, 74),\n        // 展開1\n        S(57, 57, 59, 59), S(60, 60, 64, 64), S(67, 67, 69, 69), S(71, 71, 74, 74), S(57, 57, 59, 59), S(60, 60, 64, 64), S(67, 67, 69, 69), F(0));\n\n    // 展開\n    int[ARP0_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 1));\n\n    SEQUENCER(beat, time, ARP0_BEAT_LEN, ARP0_DEV_PAT, ARP0_DEV_LEN, notes, development, arpsaw)\n    return ret;\n}\n\nvec2 arp1(float beat, float time) {\n// 1つの展開のビート数\n#define ARP1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP1_DEV_PAT 2\n\n// 展開の長さ\n#define ARP1_DEV_LEN 32\n\n    int[ARP1_BEAT_LEN * NOTE_DIV * ARP1_DEV_PAT] notes = int[](\n        // 展開0\n        S(57, 0, 59, 0), S(60, 0, 64, 0), S(67, 0, 69, 0), S(71, 0, 74, 0), S(57, 0, 59, 0), S(60, 0, 64, 0), S(67, 0, 69, 0), S(71, 0, 74, 0),\n\n        // 展開1\n        S(57, 0, 59, 0), S(60, 0, 64, 0), S(67, 0, 69, 0), S(71, 0, 74, 0), S(57, 0, 59, 0), S(60, 0, 64, 0), S(67, 0, 69, 0), F(0));\n\n    // 展開\n    int[ARP1_DEV_LEN / DEV_PACK] development = int[](D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, ARP1_BEAT_LEN, ARP1_DEV_PAT, ARP1_DEV_LEN, notes, development, arp)\n    return ret;\n}\n\nvec2 arp2(float beat, float time) {\n// 1つの展開のビート数\n#define ARP2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP2_DEV_PAT 2\n\n// 展開の長さ\n#define ARP2_DEV_LEN 32\n\n    int[ARP2_BEAT_LEN * NOTE_DIV * ARP2_DEV_PAT] notes = int[](\n        // 展開0\n        S(0, 69, 0, 71), S(0, 72, 0, 76), S(0, 79, 0, 81), S(0, 83, 0, 86), S(0, 69, 0, 71), S(0, 72, 0, 76), S(0, 79, 0, 81), F(0),\n\n        // 展開1\n        S(0, 69, 0, 71), S(0, 72, 0, 76), S(0, 79, 0, 81), S(0, 83, 0, 86), S(0, 69, 0, 71), S(0, 72, 0, 76), S(0, 79, 0, 81), S(0, 83, 0, 86));\n\n    // 展開\n    int[ARP2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1));\n\n    SEQUENCER(beat, time, ARP2_BEAT_LEN, ARP2_DEV_PAT, ARP2_DEV_LEN, notes, development, arp)\n    return ret;\n}\n\nvec2 arp3(float beat, float time) {\n// 1つの展開のビート数\n#define ARP3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP3_DEV_PAT 2\n\n// 展開の長さ\n#define ARP3_DEV_LEN 32\n\n    int[ARP3_BEAT_LEN * NOTE_DIV * ARP3_DEV_PAT] notes = int[](\n        // 展開0\n        S(72, 60, 55, 64), S(0, 0, 0, 0), S(67, 55, 64, 55), S(0, 0, 0, 0), S(72, 60, 55, 64), S(0, 0, 0, 0), S(67, 55, 64, 55), S(0, 0, 0, 0),\n\n        // 展開1\n        S(0, 0, 0, 0), S(67, 60, 72, 55), S(0, 0, 0, 0), S(67, 60, 79, 62), S(0, 0, 0, 0), S(67, 60, 72, 55), S(0, 0, 0, 0), S(0, 0, 0, 0));\n\n    // 展開\n    int[ARP3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, ARP3_BEAT_LEN, ARP3_DEV_PAT, ARP3_DEV_LEN, notes, development, arpsine)\n    return ret;\n}\n\nvec2 arp4(float beat, float time) {\n// 1つの展開のビート数\n#define ARP4_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP4_DEV_PAT 2\n\n// 展開の長さ\n#define ARP4_DEV_LEN 32\n\n    int[ARP4_BEAT_LEN * NOTE_DIV * ARP4_DEV_PAT] notes = int[](\n        // 展開0\n        S(0, 0, 0, 0), S(67, 60, 72, 55), S(0, 0, 0, 0), S(67, 60, 79, 62), S(0, 0, 0, 0), S(67, 60, 72, 55), S(0, 0, 0, 0), S(67, 60, 79, 62),\n\n        // 展開1\n        S(0, 0, 0, 0), S(67, 60, 72, 55), S(0, 0, 0, 0), S(67, 60, 79, 62), S(0, 0, 0, 0), S(67, 60, 72, 55), S(0, 0, 0, 0), S(0, 0, 0, 0));\n\n    // 展開\n    int[ARP4_DEV_LEN / DEV_PACK] development = int[](D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, ARP4_BEAT_LEN, ARP4_DEV_PAT, ARP4_DEV_LEN, notes, development, arpsine)\n    return ret;\n}\n\nvec2 arp5(float beat, float time) {\n    if (beat < 64.0 || beat >= 192.0) return vec2(0.0);\n// 1つの展開のビート数\n#define ARP5_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define ARP5_DEV_PAT 1\n\n// 展開の長さ\n#define ARP5_DEV_LEN 8\n\n    int[ARP5_BEAT_LEN * NOTE_DIV * ARP5_DEV_PAT] notes = int[](\n        // 展開0\n        S(69, 0, 79, 67), S(0, 0, 76, 0), S(0, 69, 0, 0), S(67, 0, 76, 0), S(69, 0, 79, 67), S(0, 0, 76, 0), S(0, 69, 0, 0), S(67, 0, 76, 0));\n\n    // 展開\n    int[ARP5_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, ARP5_BEAT_LEN, ARP5_DEV_PAT, ARP5_DEV_LEN, notes, development, arpsine2)\n    return ret;\n}\n\nvec2 thihat1(float beat, float time) {\n// 1つの展開のビート数\n#define HIHAT3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HIHAT3_DEV_PAT 3\n\n// 展開の長さ\n#define HIHAT3_DEV_LEN 32\n\n    int[HIHAT3_BEAT_LEN * NOTE_DIV * HIHAT3_DEV_PAT] notes = int[](\n        // 展開0\n        F(1), F(0), F(0), F(0), F(0), F(0), F(0), F(0),\n\n        // 展開1\n        E(0, 1), E(0, 1), E(0, 1), E(0, 1), E(0, 1), E(0, 1), E(0, 1), E(0, 1),\n\n        // 展開2\n        O(0), O(0));\n\n    // 展開 #define CRASH1_DEV_LEN 8　変える\n    int[HIHAT3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 2, 2, 2, 2));\n\n    SEQUENCER(beat, time, HIHAT3_BEAT_LEN, HIHAT3_DEV_PAT, HIHAT3_DEV_LEN, notes, development, hihat3)\n\n    return ret;\n}\n\nvec2 subbass1(float beat, float time) {\n// 1つの展開のビート数\n#define SUB1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define SUB1_DEV_PAT 2\n\n// 展開の長さ\n#define SUB1_DEV_LEN 32\n\n    int[SUB1_BEAT_LEN * NOTE_DIV * SUB1_DEV_PAT] notes = int[](\n        // 展開0\n        F(33), F(33), F(33), F(33), F(33), F(33), F(33), F(33),\n\n        // 展開1\n        F(33), F(33), F(33), F(33), F(33), F(33), F(33), F(33));\n\n    // 展開 #define SUB1_DEV_LEN 8　変える\n    int[SUB1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1));\n\n    SEQUENCER(beat, time, SUB1_BEAT_LEN, SUB1_DEV_PAT, SUB1_DEV_LEN, notes, development, subbass)\n    return ret;\n}\n\n//  HIHAT  //\n\nvec2 thihat2(float beat, float time) {\n// 1つの展開のビート数\n#define HIHAT2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HIHAT2_DEV_PAT 3\n\n// 展開の長さ\n#define HIHAT2_DEV_LEN 32\n\n    int[HIHAT2_BEAT_LEN * NOTE_DIV * HIHAT2_DEV_PAT] notes = int[](\n        // 展開0\n        S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1),\n\n        // 展開1\n        S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1), S(0, 1, 1, 1),\n\n        // 展開2\n        O(0), O(0));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[HIHAT2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 2, 2, 2, 2));\n\n    SEQUENCER(beat, time, KICK1_BEAT_LEN, KICK1_DEV_PAT, KICK1_DEV_LEN, notes, development, hihat2)\n    return ret;\n}\n\n//  CHORD  //\n\nvec2 introSupersaw1(float beat, float time) {\n    if (beat >= 64.0) return vec2(0.0);\n\n// 1つの展開のビート数\n#define INTROSAW_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define INTROSAW_DEV_PAT 2\n\n// 展開の長さ\n#define INTROSAW_DEV_LEN 8\n\n    int[INTROSAW_BEAT_LEN * NOTE_DIV * INTROSAW_DEV_PAT] notes = int[](\n        // 展開0\n        F(0), F(45), F(0), F(0), F(0), F(45), F(0), F(45),\n\n        // 展開1\n        F(45), F(45), F(45), F(45), F(45), F(45), F(45), F(45));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[INTROSAW_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1));\n\n    SEQUENCER(beat, time, INTROSAW_BEAT_LEN, INTROSAW_DEV_PAT, INTROSAW_DEV_LEN, notes, development, basssaw1)\n    return ret;\n}\n\nvec2 introSupersaw2(float beat, float time) {\n    if (beat >= 64.0) return vec2(0.0);\n\n    int[INTROSAW_BEAT_LEN * NOTE_DIV * INTROSAW_DEV_PAT] notes = int[](\n        // 展開0\n        F(0), F(0), F(0), F(69), F(0), F(0), F(0), F(57),\n\n        // 展開1\n        F(0), F(0), F(0), F(57), F(0), F(0), F(0), F(57));\n\n    // 展開 #define KICK1_DEV_LEN 8　変える\n    int[INTROSAW_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1));\n\n    SEQUENCER(beat, time, INTROSAW_BEAT_LEN, INTROSAW_DEV_PAT, INTROSAW_DEV_LEN, notes, development, basssaw2)\n    return ret;\n}\n\n// SUPERSAW  //\n\nvec2 chordSupersaw1(float beat, float time) {\n// 1つの展開のビート数\n#define CHORD1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CHORD1_DEV_PAT 4\n\n// 展開の長さ\n#define CHORD1_DEV_LEN 32\n\n    int[CHORD1_BEAT_LEN * NOTE_DIV * CHORD1_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(69), O(69),\n\n        // 展開2\n        F(0), F(0), E(0, 67), F(0), E(0, 67), F(0), F(0), F(0),\n\n        // 展開3\n        F(67), F(0), E(0, 67), F(0), E(0, 67), F(0), E(0, 67), F(62));\n\n    // 展開 #define CHORD1_DEV_LEN 8　変える\n    int[CHORD1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(2, 2, 2, 2, 3, 3, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, CHORD1_BEAT_LEN, CHORD1_DEV_PAT, CHORD1_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 chordSupersaw2(float beat, float time) {\n// 1つの展開のビート数\n#define CHORD2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CHORD2_DEV_PAT 4\n\n// 展開の長さ\n#define CHORD2_DEV_LEN 32\n\n    int[CHORD2_BEAT_LEN * NOTE_DIV * CHORD2_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(72), O(72),\n\n        // 展開2\n        F(0), F(0), E(0, 62), F(0), E(0, 62), F(0), F(0), F(0),\n\n        // 展開3\n        F(62), F(0), E(0, 62), F(0), E(0, 62), F(0), E(0, 62), F(57));\n\n    // 展開 #define CHORD2_DEV_LEN 8　変える\n    int[CHORD2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(2, 2, 2, 2, 3, 3, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, CHORD2_BEAT_LEN, CHORD2_DEV_PAT, CHORD2_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 chordSupersaw3(float beat, float time) {\n// 1つの展開のビート数\n#define CHORD3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CHORD3_DEV_PAT 4\n\n// 展開の長さ\n#define CHORD3_DEV_LEN 32\n\n    int[CHORD3_BEAT_LEN * NOTE_DIV * CHORD3_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(74), O(74),\n\n        // 展開2\n        F(0), F(0), E(0, 60), F(0), E(0, 60), F(0), F(0), F(0),\n\n        // 展開3\n        F(60), F(0), E(0, 60), F(0), E(0, 60), F(0), E(0, 60), F(54));\n\n    // 展開 #define CHORD3_DEV_LEN 8　変える\n    int[CHORD3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(2, 2, 2, 2, 3, 3, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, CHORD3_BEAT_LEN, CHORD3_DEV_PAT, CHORD3_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 chordSupersaw4(float beat, float time) {\n// 1つの展開のビート数\n#define CHORD4_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CHORD4_DEV_PAT 4\n\n// 展開の長さ\n#define CHORD4_DEV_LEN 32\n\n    int[CHORD4_BEAT_LEN * NOTE_DIV * CHORD4_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(79), O(79),\n\n        // 展開2\n        F(0), F(0), E(0, 57), F(0), E(0, 57), F(0), F(0), F(0),\n\n        // 展開3\n        F(57), F(0), E(0, 57), F(0), E(0, 57), F(0), E(0, 57), F(49));\n\n    // 展開 #define CHORD4_DEV_LEN 8　変える\n    int[CHORD4_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(2, 2, 2, 2, 3, 3, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, CHORD4_BEAT_LEN, CHORD4_DEV_PAT, CHORD4_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 chordSupersaw5(float beat, float time) {\n// 1つの展開のビート数\n#define CHORD5_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define CHORD5_DEV_PAT 3\n\n// 展開の長さ\n#define CHORD5_DEV_LEN 32\n\n    int[CHORD5_BEAT_LEN * NOTE_DIV * CHORD5_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(86), O(86),\n\n        // 展開2\n        O(91), O(91));\n\n    // 展開 #define CHORD4_DEV_LEN 8　変える\n    int[CHORD5_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 1, 2), D(0, 0, 0, 0, 0, 0, 0, 2), D(0, 0, 0, 0, 0, 0, 1, 2), D(0, 0, 0, 0, 0, 0, 0, 0));\n\n    SEQUENCER(beat, time, CHORD5_BEAT_LEN, CHORD5_DEV_PAT, CHORD5_DEV_LEN, notes, development, chordsaw1)\n    return ret;\n}\n\nvec2 chordSquare1(float beat, float time) {\n// 1つの展開のビート数\n#define SQUARE1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define SQUARE1_DEV_PAT 4\n\n// 展開の長さ\n#define SQUARE1_DEV_LEN 32\n\n    int[SQUARE1_BEAT_LEN * NOTE_DIV * SQUARE1_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        S(67, 67, 0, 67), S(67, 0, 67, 67), S(67, 67, 0, 67), S(67, 0, 67, 67), S(67, 67, 0, 67), S(67, 0, 67, 67), S(67, 67, 0, 67), S(67, 0, 72, 72),\n\n        // 展開2\n        S(67, 67, 0, 67), S(67, 0, 67, 67), S(67, 67, 0, 67), S(67, 0, 67, 67), S(67, 67, 0, 67), S(67, 0, 67, 67), S(72, 72, 0, 72), S(0, 0, 72, 72),\n\n        // 展開3\n        S(72, 0, 0, 0), S(0, 0, 67, 0), S(0, 0, 0, 71), S(0, 0, 0, 0), S(72, 0, 0, 0), S(0, 0, 67, 0), S(0, 0, 0, 71), S(0, 0, 0, 0));\n\n    // 展開 #define SQUARE1_DEV_LEN 8　変える\n    int[SQUARE1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 1, 2, 2, 2), D(3, 3, 3, 3, 3, 3, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, SQUARE1_BEAT_LEN, SQUARE1_DEV_PAT, SQUARE1_DEV_LEN, notes, development, chordsquare1)\n    return ret;\n}\n\nvec2 chordSquare2(float beat, float time) {\n// 1つの展開のビート数\n#define SQUARE2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define SQUARE2_DEV_PAT 4\n\n// 展開の長さ\n#define SQUARE2_DEV_LEN 32\n\n    int[SQUARE2_BEAT_LEN * NOTE_DIV * SQUARE2_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        S(62, 62, 0, 62), S(62, 0, 62, 62), S(62, 62, 0, 62), S(62, 0, 62, 62), S(62, 62, 0, 62), S(62, 0, 62, 62), S(62, 62, 0, 62), S(62, 0, 67, 67),\n\n        // 展開2\n        S(62, 62, 0, 62), S(62, 0, 62, 62), S(62, 62, 0, 62), S(62, 0, 62, 62), S(62, 62, 0, 62), S(62, 0, 62, 62), S(67, 67, 0, 67), S(0, 0, 67, 67),\n\n        // 展開3\n        S(71, 71, 0, 71), S(71, 0, 71, 71), S(71, 71, 0, 71), S(71, 0, 71, 71), S(71, 71, 0, 71), S(71, 0, 71, 71), S(72, 72, 0, 72), S(0, 0, 72, 72));\n\n    // 展開 #define SQUARE2_DEV_LEN 8　変える\n    int[SQUARE2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 1, 2, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, SQUARE2_BEAT_LEN, SQUARE2_DEV_PAT, SQUARE2_DEV_LEN, notes, development, chordsquare1)\n    return ret;\n}\n\nvec2 chordSquare3(float beat, float time) {\n// 1つの展開のビート数\n#define SQUARE3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define SQUARE3_DEV_PAT 4\n\n// 展開の長さ\n#define SQUARE3_DEV_LEN 32\n\n    // ノート番号\n    // F: 4分音符\n    // E: 8分音符\n    // S: 16分音符\n    // ノート番号0は休符\n    int[SQUARE3_BEAT_LEN * NOTE_DIV * SQUARE3_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        S(57, 57, 0, 57), S(57, 0, 57, 57), S(57, 57, 0, 57), S(57, 0, 57, 57), S(57, 57, 0, 57), S(57, 0, 57, 57), S(57, 57, 0, 57), S(57, 0, 59, 59),\n\n        // 展開2\n        S(57, 57, 0, 57), S(57, 0, 57, 57), S(57, 57, 0, 57), S(57, 0, 57, 57), S(57, 57, 0, 57), S(57, 0, 57, 57), S(57, 57, 0, 57), S(0, 0, 57, 57),\n\n        // 展開3\n        S(0, 0, 0, 71), S(0, 0, 0, 0), S(72, 0, 0, 0), S(0, 0, 67, 0), S(0, 0, 0, 71), S(0, 0, 0, 0), S(72, 0, 0, 0), S(0, 0, 67, 0));\n\n    // 展開 #define SQUARE3_DEV_LEN 8　変える\n    int[SQUARE3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 1, 2, 2, 2), D(3, 3, 3, 3, 3, 3, 3, 3), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, SQUARE3_BEAT_LEN, SQUARE3_DEV_PAT, SQUARE3_DEV_LEN, notes, development, chordsquare1)\n    return ret;\n}\n\nvec2 snare1(float beat, float time) {\n// 1つの展開のビート数\n#define SNARE1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define SNARE1_DEV_PAT 2\n\n// 展開の長さ\n#define SNARE1_DEV_LEN 32\n\n    int[SNARE1_BEAT_LEN * NOTE_DIV * SNARE1_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(0), E(1, 0), F(0), E(1, 0), F(0), E(1, 0), F(0), E(1, 0));\n\n    // 展開 #define SNARE1_DEV_LEN 8　変える\n    int[SNARE1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, SNARE1_BEAT_LEN, SNARE1_DEV_PAT, SNARE1_DEV_LEN, notes, development, snare)\n    return ret;\n}\n\n//\n// hokkSUpersaw1は79のみを再生する\n//\n\nvec2 hookSupersaw1(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK1_DEV_PAT 2\n\n// 展開の長さ\n#define HOOK1_DEV_LEN 32\n\n    int[HOOK1_BEAT_LEN * NOTE_DIV * HOOK1_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79), F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79));\n\n    // 展開 #define HOOK1_DEV_LEN 8　変える\n    int[HOOK1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK1_BEAT_LEN, HOOK1_DEV_PAT, HOOK1_DEV_LEN, notes, development, chordsaw2)\n    return ret;\n}\n\nvec2 hookSupersaw2(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK2_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK2_DEV_PAT 4\n\n// 展開の長さ\n#define HOOK2_DEV_LEN 32\n\n    int[HOOK2_BEAT_LEN * NOTE_DIV * HOOK2_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74), F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74),\n\n        // 展開2\n        F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74), F(86), S(86, 86, 86, 86), S(86, 86, 86, 86), S(86, 86, 86, 86),\n\n        // 展開3 HOOK 8小節目に使用\n        F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74), F(76), S(76, 76, 76, 76), S(76, 76, 76, 76), S(76, 76, 76, 76));\n\n    // 展開 #define HOOK2_DEV_LEN 8　変える\n    int[HOOK2_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 2, 1, 3, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK2_BEAT_LEN, HOOK2_DEV_PAT, HOOK2_DEV_LEN, notes, development, chordsaw2)\n    return ret;\n}\n\nvec2 hookSupersaw3(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK3_DEV_PAT 8\n\n// 展開の長さ\n#define HOOK3_DEV_LEN 32\n\n    int[HOOK3_BEAT_LEN * NOTE_DIV * HOOK3_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(57), S(57, 57, 57, 57), S(57, 57, 57, 57), S(57, 57, 57, 57), F(57), S(57, 57, 57, 57), S(57, 57, 57, 57), S(84, 84, 84, 84),\n\n        // 展開2\n        F(83), S(83, 83, 83, 83), S(83, 83, 83, 83), S(83, 83, 83, 83), F(83), S(83, 83, 83, 83), S(83, 83, 83, 83), S(83, 83, 83, 83),\n\n        // 展開3 HOOK 7～8小節目に使用\n        F(83), S(83, 83, 83, 83), S(83, 83, 83, 83), S(83, 83, 83, 83), F(88), S(88, 88, 88, 88), S(91, 91, 91, 91), S(91, 91, 91, 91),\n\n        // 展開4 HOOK 9～小節目に使用\n        F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79), F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(72, 72, 72, 72),\n\n        // 展開5 HOOK 11～小節目に使用\n        F(83), S(83, 83, 83, 83), S(83, 83, 83, 83), S(83, 83, 83, 83), F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79),\n\n        // 展開6 HOOK 11～小節目に使用\n        F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79), F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79),\n\n        // 展開7 HOOK 11～小節目に使用\n        F(83), S(83, 83, 83, 83), S(83, 83, 83, 83), S(83, 83, 83, 83), F(86), S(86, 86, 86, 86), S(86, 86, 86, 86), S(86, 86, 86, 86));\n\n    // 展開 #define HOOK3_DEV_LEN 8　変える\n    int[HOOK3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 2, 1, 3, 4, 5, 6, 7), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK3_BEAT_LEN, HOOK3_DEV_PAT, HOOK3_DEV_LEN, notes, development, chordsaw2)\n    return ret;\n}\n\nvec2 hookSupersaw4(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK4_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK4_DEV_PAT 6\n\n// 展開の長さ\n#define HOOK4_DEV_LEN 32\n\n    int[HOOK4_BEAT_LEN * NOTE_DIV * HOOK4_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71),\n\n        // 展開4 HOOK 9～小節目に使用\n        F(91), S(91, 91, 91, 91), S(91, 91, 91, 91), S(91, 91, 91, 91), F(91), S(91, 91, 91, 91), S(91, 91, 91, 91), S(84, 84, 84, 84),\n\n        // 展開5 HOOK 11～小節目に使用\n        F(95), S(95, 95, 95, 95), S(95, 95, 95, 95), S(95, 95, 95, 95), F(91), S(91, 91, 91, 91), S(91, 91, 91, 91), S(91, 91, 91, 91),\n\n        // 展開6 HOOK 11～小節目に使用\n        F(91), S(91, 91, 91, 91), S(91, 91, 91, 91), S(91, 91, 91, 91), F(91), S(91, 91, 91, 91), S(91, 91, 91, 91), S(91, 91, 91, 91),\n\n        // 展開7 HOOK 11～小節目に使用\n        F(95), S(95, 95, 95, 95), S(95, 95, 95, 95), S(95, 95, 95, 95), F(98), S(98, 98, 98, 98), S(98, 98, 98, 98), S(98, 98, 98, 98));\n\n    // 展開 #define HOOK4_DEV_LEN 8　変える\n    int[HOOK4_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 1, 2, 3, 4, 5), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK4_BEAT_LEN, HOOK4_DEV_PAT, HOOK4_DEV_LEN, notes, development, chordsaw2)\n    return ret;\n}\n\nvec2 hookSupersaw5(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK3_DEV_PAT 8\n\n// 展開の長さ\n#define HOOK3_DEV_LEN 32\n\n    int[HOOK3_BEAT_LEN * NOTE_DIV * HOOK3_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(69), S(69, 69, 69, 69), S(69, 69, 69, 69), S(69, 69, 69, 69), F(69), S(69, 69, 69, 69), S(69, 69, 69, 69), S(72, 72, 72, 72),\n\n        // 展開2\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(83), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71),\n\n        // 展開3 HOOK 7～8小節目に使用\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(76), S(76, 76, 76, 76), S(79, 79, 79, 79), S(79, 79, 79, 79),\n\n        // 展開4 HOOK 9～小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(60, 60, 60, 60),\n\n        // 展開5 HOOK 11～小節目に使用\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74),\n\n        // 展開6 HOOK 11～小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(72, 72, 72, 72),\n\n        // 展開7 HOOK 11～小節目に使用\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(74), S(74, 74, 74, 74), S(79, 79, 79, 79), S(79, 79, 79, 79));\n\n    // 展開 #define HOOK3_DEV_LEN 8　変える\n    int[HOOK3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 2, 1, 3, 4, 5, 6, 7), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK3_BEAT_LEN, HOOK3_DEV_PAT, HOOK3_DEV_LEN, notes, development, leadsub)\n    return ret;\n}\n\nvec2 hookSupersaw6(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK3_DEV_PAT 8\n\n// 展開の長さ\n#define HOOK3_DEV_LEN 32\n\n    int[HOOK3_BEAT_LEN * NOTE_DIV * HOOK3_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開\n        F(45), S(45, 45, 45, 45), S(45, 45, 45, 45), S(45, 45, 45, 45), F(45), S(45, 45, 45, 45), S(45, 45, 45, 45), S(76, 76, 76, 76),\n\n        // 展開2\n        F(59), S(59, 59, 59, 59), S(59, 59, 59, 59), S(59, 59, 59, 59), F(71), S(59, 59, 59, 59), S(59, 59, 59, 59), S(59, 59, 59, 59),\n\n        // 展開3 HOOK 7～8小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67),\n\n        // 展開4 HOOK 9～小節目に使用\n        F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79), F(72), S(67, 67, 67, 67), S(67, 67, 67, 67), S(48, 48, 48, 48),\n\n        // 展開5 HOOK 11～小節目に使用\n        F(83), S(83, 83, 83, 83), S(84, 84, 84, 84), S(83, 83, 83, 83), F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(57, 57, 57, 57),\n\n        // 展開6 HOOK 11～小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(76, 76, 76, 76),\n\n        // 展開7 HOOK 11～小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(62), S(62, 62, 62, 62), S(62, 62, 62, 62), S(62, 62, 62, 62));\n\n    // 展開 #define HOOK3_DEV_LEN 8　変える\n    int[HOOK3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 2, 1, 3, 4, 5, 6, 7), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK3_BEAT_LEN, HOOK3_DEV_PAT, HOOK3_DEV_LEN, notes, development, leadsub)\n    return ret;\n}\n\nvec2 hookSupersaw8(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK8_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK8_DEV_PAT 3\n\n// 展開の長さ\n#define HOOK8_DEV_LEN 32\n\n    int[HOOK8_BEAT_LEN * NOTE_DIV * HOOK8_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74), F(79), S(79, 79, 79, 79), S(79, 79, 79, 79), S(79, 79, 79, 79),\n\n        // 展開2\n        O(0), O(0));\n\n    // 展開 #define HOOK3_DEV_LEN 8　変える\n    int[HOOK8_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 1, 0, 0, 0, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK8_BEAT_LEN, HOOK8_DEV_PAT, HOOK8_DEV_LEN, notes, development, leadsub)\n    return ret;\n}\n\nvec2 hookSupersaw7(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK7_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK7_DEV_PAT 2\n\n// 展開の長さ\n#define HOOK7_DEV_LEN 32\n\n    int[HOOK7_BEAT_LEN * NOTE_DIV * HOOK7_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        S(69, 72, 79, 69), S(72, 79, 69, 72), S(79, 69, 72, 79), S(69, 72, 79, 69), S(72, 79, 69, 72), S(79, 69, 72, 79), S(69, 72, 79, 69), S(72, 79, 69, 72));\n\n    // 展開 #define HOOK3_DEV_LEN 8　変える\n    int[HOOK7_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK7_BEAT_LEN, HOOK7_DEV_PAT, HOOK7_DEV_LEN, notes, development, arpsaw)\n    return ret;\n}\n\nvec2 hookSupersaw9(float beat, float time) {\n// 1つの展開のビート数\n#define HOOK3_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define HOOK3_DEV_PAT 8\n\n// 展開の長さ\n#define HOOK3_DEV_LEN 32\n\n    int[HOOK3_BEAT_LEN * NOTE_DIV * HOOK3_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(69), S(69, 69, 69, 69), S(69, 69, 69, 69), S(69, 69, 69, 69), F(69), S(69, 69, 69, 69), S(69, 69, 69, 69), S(72, 72, 72, 72),\n\n        // 展開2\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(83), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71),\n\n        // 展開3 HOOK 7～8小節目に使用\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(76), S(76, 76, 76, 76), S(79, 79, 79, 79), S(79, 79, 79, 79),\n\n        // 展開4 HOOK 9～小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(62), S(62, 62, 62, 62), S(62, 62, 62, 62), S(60, 60, 60, 60),\n\n        // 展開5 HOOK 11～小節目に使用\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(74), S(74, 74, 74, 74), S(74, 74, 74, 74), S(74, 74, 74, 74),\n\n        // 展開6 HOOK 11～小節目に使用\n        F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(67, 67, 67, 67), F(67), S(67, 67, 67, 67), S(67, 67, 67, 67), S(72, 72, 72, 72),\n\n        // 展開7 HOOK 11～小節目に使用\n        F(71), S(71, 71, 71, 71), S(71, 71, 71, 71), S(71, 71, 71, 71), F(74), S(74, 74, 74, 74), S(76, 76, 76, 76), S(76, 76, 76, 76));\n\n    // 展開 #define HOOK3_DEV_LEN 8　変える\n    int[HOOK3_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(1, 2, 1, 3, 4, 5, 6, 7), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, HOOK3_BEAT_LEN, HOOK3_DEV_PAT, HOOK3_DEV_LEN, notes, development, leadsub2)\n    return ret;\n}\n\nvec2 snare2(float beat, float time) {\n// 1つの展開のビート数\n#define SNARE1_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define SNARE1_DEV_PAT 2\n\n// 展開の長さ\n#define SNARE1_DEV_LEN 32\n\n    int[SNARE1_BEAT_LEN * NOTE_DIV * SNARE1_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        S(1, 1, 1, 1), S(1, 1, 1, 1), S(1, 1, 1, 1), S(1, 1, 1, 1), S(1, 1, 1, 1), S(1, 1, 1, 1), S(1, 1, 1, 1), S(1, 1, 1, 1));\n\n    // 展開 #define SNARE1_DEV_LEN 8　変える\n    int[SNARE1_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 0, 0, 0, 0, 1, 1), D(0, 0, 0, 0, 0, 0, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, SNARE1_BEAT_LEN, SNARE1_DEV_PAT, SNARE1_DEV_LEN, notes, development, snarefill)\n    return ret;\n}\n\nvec2 noisefeed(float beat, float time) {\n// 1つの展開のビート数\n#define FEED_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define FEED_DEV_PAT 3\n\n// 展開の長さ\n#define FEED_DEV_LEN 32\n\n    int[FEED_BEAT_LEN * NOTE_DIV * FEED_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1~4\n        O(0), F(1), F(1), F(1), F(1),\n\n        // 展開3\n        O(1), O(0));\n\n    // 展開 #define SNARE1_DEV_LEN 8　変える\n    int[FEED_DEV_LEN / DEV_PACK] development = int[](D(2, 0, 2, 1, 2, 0, 0, 1), D(2, 0, 0, 0, 2, 0, 0, 1), D(2, 0, 0, 0, 2, 0, 0, 1), D(2, 0, 0, 0, 2, 0, 0, 0));\n    SEQUENCER(beat, time, FEED_BEAT_LEN, FEED_DEV_PAT, FEED_DEV_LEN, notes, development, noisefeedin)\n    return ret;\n}\n\nvec2 noisesidechain1(float beat, float time) {\n// 1つの展開のビート数\n#define NOISESIDE_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define NOISESIDE_DEV_PAT 2\n\n// 展開の長さ\n#define NOISESIDE_DEV_LEN 32\n\n    int[NOISESIDE_BEAT_LEN * NOTE_DIV * NOISESIDE_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        F(1), F(1), F(1), F(1), F(1), F(1), F(1), F(1));\n\n    // 展開 #define SNARE1_DEV_LEN 8　変える\n    int[NOISESIDE_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 1, 1, 1), D(0, 0, 0, 0, 1, 1, 0, 0), D(1, 1, 1, 1, 1, 1, 1, 1), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, NOISESIDE_BEAT_LEN, NOISESIDE_DEV_PAT, NOISESIDE_DEV_LEN, notes, development, sidechainnoise)\n    return ret;\n}\n\nvec2 noisesidechain2(float beat, float time) {\n// 1つの展開のビート数 L\n#define NOISESIDE_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define NOISESIDE_DEV_PAT 2\n\n// 展開の長さ\n#define NOISESIDE_DEV_LEN 32\n\n    int[NOISESIDE_BEAT_LEN * NOTE_DIV * NOISESIDE_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(1), O(0));\n\n    // 展開 #define SNARE1_DEV_LEN 8　変える\n    int[NOISESIDE_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 1, 0, 0, 0), D(1, 0, 0, 0, 0, 0, 0, 0), D(1, 0, 0, 0, 1, 0, 0, 0), D(1, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, NOISESIDE_BEAT_LEN, NOISESIDE_DEV_PAT, NOISESIDE_DEV_LEN, notes, development, sidechainnoise2)\n    return ret;\n}\n\nvec2 noisesidechain3(float beat, float time) {\n// 1つの展開のビート数 L\n#define NOISESIDE_BEAT_LEN 8\n\n// 展開のパターンの種類\n#define NOISESIDE_DEV_PAT 2\n\n// 展開の長さ\n#define NOISESIDE_DEV_LEN 32\n\n    int[NOISESIDE_BEAT_LEN * NOTE_DIV * NOISESIDE_DEV_PAT] notes = int[](\n        // 展開0\n        O(0), O(0),\n\n        // 展開1\n        O(1), O(0));\n\n    // 展開 #define SNARE1_DEV_LEN 8　変える\n    int[NOISESIDE_DEV_LEN / DEV_PACK] development = int[](D(0, 0, 0, 0, 0, 0, 1, 0), D(0, 0, 0, 0, 0, 0, 0, 0), D(0, 0, 1, 0, 0, 0, 1, 0), D(0, 0, 0, 0, 0, 0, 0, 0));\n    SEQUENCER(beat, time, NOISESIDE_BEAT_LEN, NOISESIDE_DEV_PAT, NOISESIDE_DEV_LEN, notes, development, sidechainnoise2)\n    return ret;\n}\n\nvec2 mainSound(float time) {\n    //編集用に時間を途中からすすめる\n    // time += 0.0;\n\n    float beat = timeToBeat(time);\n    vec2 ret = vec2(0.0);\n\n    // Kick\n    ret += vec2(0.7) * kick1(beat, time);\n    ret += vec2(0.06) * kick2(beat, time);\n\n    // Exf\n    ret += vec2(0.5, 0.15) * crashcymbal1(beat, time);\n    ret += vec2(0.15, 0.5) * crashcymbal2(beat, time);\n\n    // Arp\n    ret += vec2(0.3) * sidechain * subbass1(beat, time);\n    ret += vec2(0.1) * sidechain2 * arp0(beat, time);\n    ret += vec2(0.35, 0.0) * sidechain2 * arp1(beat, time);\n    ret += vec2(0.0, 0.35) * sidechain2 * arp2(beat, time);\n    ret += vec2(0.5, 1.0) * sidechain2 * arp3(beat, time);\n    ret += vec2(1.0, 0.3) * sidechain2 * arp4(beat, time);\n    ret += vec2(0.4) * sidechain * arp5(beat, time);\n\n    // Chord\n    ret += vec2(0.7, 0.2) * sidechain2 * chordSupersaw1(beat, time);\n    ret += vec2(0.4) * sidechain2 * chordSupersaw2(beat, time);\n    ret += vec2(0.3, 0.2) * sidechain2 * chordSupersaw3(beat, time);\n    ret += vec2(0.5, 0.6) * sidechain2 * chordSupersaw4(beat, time);\n    ret += vec2(0.3) * sidechain2 * chordSupersaw5(beat, time);\n\n    // Noise\n    ret += vec2(0.4) * sidechain5 * noisesidechain1(beat, time);\n    ret += vec2(0.2, 0.05) * sidechain5 * noisesidechain2(beat, time);\n    ret += vec2(0.05, 0.2) * sidechain5 * noisesidechain3(beat, time);\n\n    // Buildup chord\n    ret += vec2(0.1, 0.3) * sidechain2 * chordSquare1(beat, time);\n    ret += vec2(0.3) * sidechain2 * chordSquare2(beat, time);\n    ret += vec2(0.3, 0.1) * sidechain2 * chordSquare3(beat, time);\n\n    // Supersaw\n    ret += vec2(0.02, 0.15) * sidechain * introSupersaw1(beat, time);\n    ret += vec2(0.2, 0.05) * sidechain2 * introSupersaw2(beat, time);\n\n    // Hook_Supersaw\n    ret += vec2(0.3, 0.15) * sidechain * hookSupersaw1(beat, time);\n    ret += vec2(0.4) * sidechain * hookSupersaw2(beat, time);\n    ret += vec2(0.10, 0.2) * sidechain * hookSupersaw3(beat, time);\n    ret += vec2(0.2, 0.05) * sidechain * hookSupersaw4(beat, time);\n\n    // Hook_Voice\n    ret += vec2(0.07, 0.13) * sidechain * hookSupersaw5(beat, time);\n    ret += vec2(0.03, 0.1) * sidechain * hookSupersaw6(beat, time);\n    ret += vec2(0.08, 0.05) * sidechain4 * hookSupersaw7(beat, time);\n    ret += vec2(0.1, 0.05) * sidechain4 * hookSupersaw8(beat, time);\n    ret += vec2(0.03, 0.02) * sidechain * hookSupersaw9(beat, time);\n\n    // ret = vec2(0.0);\n\n    // ここまでの音をMute\n\n    // Bass\n    ret += vec2(0.5) * sidechain4 * bass1(beat, time);\n    ret += vec2(0.19, 0.19) * sidechain4 * bass2(beat, time);\n    ret += vec2(0.01) * sidechain4 * bass3(beat, time);\n    ret += vec2(0.2, 0.15) * sidechain2 * sideSupersaw1(beat, time);\n    ret += vec2(0.15, 0.2) * sidechain2 * sideSupersaw2(beat, time);\n    ret += vec2(0.05, 0.05) * sidechain4 * tb303synth(beat, time);\n\n    // Hihat\n    ret += vec2(0.0, 0.7) * sidechain * thihat1(beat, time);\n    ret += vec2(0.3, 0.05) * sidechain * thihat2(beat, time);\n\n    // Snare\n    ret += vec2(0.2) * snare1(beat, time);\n    ret += vec2(0.1) * snare2(beat, time);\n    ret += vec2(0.37, 0.3) * sidechain2 * noisefeed(beat, time);\n\n    return clamp(ret, -1.0, 1.0);\n}"},function(n,e,t){"use strict";t.r(e),e.default="body{background-color:#000;margin:0;padding:0}#c{display:none}canvas{display:block;position:absolute;top:0;left:0;right:0;bottom:0;margin:auto}.container{display:flex;flex-direction:column;position:absolute;top:0;justify-content:center;align-items:center;width:100%;height:100%;color:#fff}p{font-size:100px;font-family:arial;text-align:center}.button{border-style:solid;padding:10px 20px;animation:blinkAnime .85714285714s infinite alternate}@keyframes blinkAnime{0%{border-color:#000}100%{border-color:#fff}}select{font-size:100px;font-family:arial;text-align:center}.lds-facebook{display:inline-block;position:relative;width:80px;height:80px}.lds-facebook div{display:inline-block;position:absolute;left:8px;width:16px;background:#fff;animation:lds-facebook 1.2s cubic-bezier(0,.5,.5,1) infinite}.lds-facebook div:nth-child(1){left:8px;animation-delay:-.24s}.lds-facebook div:nth-child(2){left:32px;animation-delay:-.12s}.lds-facebook div:nth-child(3){left:56px;animation-delay:0}@keyframes lds-facebook{0%{top:8px;height:64px}100%,50%{top:24px;height:32px}}"},function(n,e,t){"use strict";t.r(e);var i=0,o=1,a=2,r=3,E=4,f=function(){},l=function(n,e,t,l,s,c,S,_,m,d,u,v){var p=this;this.init=function(){p.timeLength=n,p.isPlaying=!0,p.needsUpdate=!1,p.time=0,p.debugFrameNumber=-1,p.uniformArray=[],p.uniforms={};var D=p.audioContext=new window.AudioContext,A=p.canvas=document.createElement("canvas");A.width=window.innerWidth,A.height=window.innerHeight,window.document.body.appendChild(A);var T=A.getContext("webgl2",{preserveDrawingBuffer:!0});if(T)if(T.getExtension("EXT_color_buffer_float"))if(T.getExtension("OES_texture_float_linear")){T.enable(T.CULL_FACE);var h=[[1,1],[-1,1],[1,-1],[-1,-1]],N=new Float32Array([].concat.apply([],h)),O=T.createBuffer();T.bindBuffer(T.ARRAY_BUFFER,O),T.bufferData(T.ARRAY_BUFFER,N,T.STATIC_DRAW),T.bindBuffer(T.ARRAY_BUFFER,null);var b=[[0,1,2],[3,2,1]],V=new Uint16Array([].concat.apply([],b)),F=T.createBuffer();T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,F),T.bufferData(T.ELEMENT_ARRAY_BUFFER,V,T.STATIC_DRAW),T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,null);var x=T.createVertexArray(),R=v(T),L=(t.split("\n").length,function(n,e){var t=T.createShader(e);if(T.shaderSource(t,n),T.compileShader(t),!T.getShaderParameter(t,T.COMPILE_STATUS)){var i=T.getShaderInfoLog(t);console.log(n,i)}return t}),g=function(n){var t=[L(e,T.VERTEX_SHADER),L(n,T.FRAGMENT_SHADER)],i=T.createProgram();return t.forEach((function(n){return T.attachShader(i,n)})),T.linkProgram(i),T.getProgramParameter(i,T.LINK_STATUS)||console.log(T.getProgramInfoLog(i)),i},P=function(n){if(n.type!==o){var e=n.uniforms.iResolution.value[0],t=n.uniforms.iResolution.value[1],i=T.FLOAT,a=T.RGBA32F,r=T.LINEAR;n.type===E&&(e=512,t=512,i=T.UNSIGNED_BYTE,a=T.RGBA,r=T.NEAREST),n.frameBuffer=T.createFramebuffer(),T.bindFramebuffer(T.FRAMEBUFFER,n.frameBuffer),n.texture=T.createTexture(),T.bindTexture(T.TEXTURE_2D,n.texture),T.texImage2D(T.TEXTURE_2D,0,a,e,t,0,T.RGBA,i,null),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_MAG_FILTER,r),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_MIN_FILTER,r),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_WRAP_S,T.CLAMP_TO_EDGE),T.texParameteri(T.TEXTURE_2D,T.TEXTURE_WRAP_T,T.CLAMP_TO_EDGE),T.framebufferTexture2D(T.FRAMEBUFFER,T.COLOR_ATTACHMENT0,T.TEXTURE_2D,n.texture,0),T.bindTexture(T.TEXTURE_2D,null),T.bindRenderbuffer(T.RENDERBUFFER,null),T.bindFramebuffer(T.FRAMEBUFFER,null)}},C=function(n,e,t,i){!function(n){T.bindVertexArray(x),T.bindBuffer(T.ARRAY_BUFFER,O),T.bindBuffer(T.ELEMENT_ARRAY_BUFFER,F);var e=T.getAttribLocation(n,"vert2d"),t=T.FLOAT,i=h[0].length,o=i*Float32Array.BYTES_PER_ELEMENT;T.enableVertexAttribArray(e),T.vertexAttribPointer(e,i,t,!1,o,0),T.bindVertexArray(null)}(n);var o=new f;if(o.program=n,o.index=e,o.type=t,o.scale=i,o.uniforms={iResolution:{type:"v3",value:[A.width*o.scale,A.height*o.scale,0]},iTime:{type:"f",value:0},iPrevPass:{type:"t",value:Math.max(o.index-1,0)},iBeforeBloom:{type:"t",value:Math.max(s-1,0)},iBlockOffset:{type:"f",value:0},iSampleRate:{type:"f",value:D.sampleRate},iTextTexture:{type:"t",value:0}},t===r){var a=e-(s+c);o.uniforms.iPairBloomDown={type:"t",value:e-2*a}}return p.uniformArray.forEach((function(n){o.uniforms[n.key]={type:"number"==typeof n.initValue?"f":"v3",value:n.initValue}})),o.locations=function(n){var e={};return Object.keys(n.uniforms).forEach((function(t){e[t]=T.getUniformLocation(n.program,t)})),e}(o),P(o),o},y=function(n){T.useProgram(n.program),T.bindFramebuffer(T.FRAMEBUFFER,n.frameBuffer),T.clear(T.COLOR_BUFFER_BIT|T.DEPTH_BUFFER_BIT);for(var e=0,t=Object.entries(n.uniforms);e<t.length;e++){var i=t[e],o=i[0],a=i[1],r={f:T.uniform1f,v3:T.uniform3fv},E={iPrevPass:0,iBeforeBloom:1,iPairBloomDown:2,iTextTexture:3};"t"===a.type?(T.activeTexture(T.TEXTURE0+E[o]),"iTextTexture"===o?T.bindTexture(T.TEXTURE_2D,R):T.bindTexture(T.TEXTURE_2D,H[a.value].texture),T.uniform1i(n.locations[o],E[o])):r[a.type].call(T,n.locations[o],a.value)}T.bindVertexArray(x);var f=0*b[0].length;T.drawElements(T.TRIANGLES,V.length,T.UNSIGNED_SHORT,f);var l=T.getError();l!==T.NO_ERROR&&console.log(l),T.bindVertexArray(null),T.useProgram(null)};p.setSize=function(n,e){var t=T.canvas;t.width=n,t.height=e,T.viewport(0,0,n,e),H.forEach((function(t){T.deleteFramebuffer(t.frameBuffer),T.deleteTexture(t.texture),t.uniforms.iResolution.value=[n*t.scale,e*t.scale,0],P(t)}))},p.playSound=function(){p.audioSource.start(p.audioContext.currentTime,p.time%p.timeLength)},p.render=function(){H.forEach((function(n){n.uniforms.iTime.value=p.time;for(var e=0,t=Object.entries(p.uniforms);e<t.length;e++){var i=t[e],o=i[0],a=i[1];void 0!==n.uniforms[o]&&(n.uniforms[o].value="number"==typeof a?a:[a[0]/255,a[1]/255,a[2]/255])}y(n)}))};var I=function(n){for(var e,t=/uniform (float|vec3) (g.+);\s*(\/\/ ([\-\d\.-]+))?( ([\-\d\.]+) ([\-\d\.]+))?( [\w\d]+)?/g;null!==(e=t.exec(n));){var i=void 0;i="float"===e[1]?{key:e[2],initValue:void 0!==e[4]?parseFloat(e[4]):0}:{key:e[2],initValue:[parseFloat(e[4]),parseFloat(e[6]),parseFloat(e[7])]},p.uniforms[i.key]||(p.uniformArray.push(i),p.uniforms[i.key]=i.initValue)}};I(t),l.forEach((function(n){I(n)})),I(S),I(_),I(m),I(d);var H=[],B=0;l.forEach((function(n,e,E){if(e===s){H.push(C(g(t+S),B,a,1)),B++;for(var f=1,l=0;l<c;l++)f*=.5,H.push(C(g(t+_),B,a,f)),B++;for(l=0;l<c-1;l++)f*=2,H.push(C(g(t+m),B,r,f)),B++;H.push(C(g(t+d),B,r,1)),B++}H.push(C(g(t+n),B,e<E.length-1?i:o,1)),B++})),function(){for(var e=Math.ceil(D.sampleRate*n),t=D.createBuffer(2,e,D.sampleRate),i=e/262144,o=g(u),a=C(o,0,E,1),r=0;r<i;r++){a.uniforms.iBlockOffset.value=262144*r/D.sampleRate,y(a);var f=new Uint8Array(1048576);T.readPixels(0,0,512,512,T.RGBA,T.UNSIGNED_BYTE,f);for(var l=t.getChannelData(0),s=t.getChannelData(1),c=0;c<262144;c++)l[262144*r+c]=(f[4*c+0]+256*f[4*c+1])/65535*2-1,s[262144*r+c]=(f[4*c+2]+256*f[4*c+3])/65535*2-1}p.audioSource=D.createBufferSource(),p.audioSource.buffer=t,p.audioSource.connect(D.destination)}();var K=0,w=null,U=function(n){requestAnimationFrame(U),w||(w=n);var e=.001*(n-K);(p.isPlaying||p.needsUpdate)&&(null!=p.onRender&&p.onRender(p.time,e),p.render(),p.time=.001*(n-w)),p.needsUpdate=!1,K=n};p.play=function(){requestAnimationFrame(U)}}else alert("need OES_texture_float_linear");else alert("need EXT_color_buffer_float");else console.log("WebGL 2 is not supported...")}},s=function(n,e,t){return n*(1-t)+e*t},c=function(n,e){return Math.sin(n+e)+.5*Math.sin(2*n+e)+.25*Math.sin(4*n+e)},S=function(){function n(n,e,t){this.x=n,this.y=e,this.z=t}return n.prototype.add=function(e){return new n(this.x+e.x,this.y+e.y,this.z+e.z)},n.prototype.mul=function(e){return new n(this.x*e.x,this.y*e.y,this.z*e.z)},n.prototype.scale=function(e){return new n(this.x*e,this.y*e,this.z*e)},n.mix=function(e,t,i){return new n(s(e.x,t.x,i),s(e.y,t.y,i),s(e.z,t.z,i))},n.fbm=function(e){return new n(c(11431,e),c(23123,e),c(87034,e))},n}(),_=new l(109.714285714,t(0).default,t(1).default,[t(2).default,t(3).default],1,5,t(4).default,t(5).default,t(6).default,t(7).default,t(8).default,(function(n){var e=document.createElement("canvas"),t=e.getContext("2d"),i=["A 64K INTRO","GRAPHICS","gam0022","MUSIC","sadakkey","RE: SIMULATED","REALITY","MERCURY","RGBA & TBC","Ctrl-Alt-Test","Conspiracy","Poo-Brain","Fairlight","kaneta","FMS_Cat",String.fromCharCode(189)+"-bit Cheese","Prismbeings","0x4015 & YET1","LJ & Alcatraz","logicoma","Polarity"];e.width=2048,e.height=4096,t.clearRect(0,0,e.width,e.height),t.fillStyle="black",t.fillRect(0,0,e.width,e.height),t.font="110px arial",t.textAlign="center",t.textBaseline="middle",t.fillStyle="white",i.forEach((function(n,i){t.fillText(n,e.width/2,64+128*i)}));var o=n.createTexture();return n.bindTexture(n.TEXTURE_2D,o),n.texImage2D(n.TEXTURE_2D,0,n.RGBA,n.RGBA,n.UNSIGNED_BYTE,e),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_MIN_FILTER,n.LINEAR),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_S,n.CLAMP_TO_EDGE),n.texParameteri(n.TEXTURE_2D,n.TEXTURE_WRAP_T,n.CLAMP_TO_EDGE),o})),m=function(){function n(n){this.input=n,this.begin=0,this.done=!1}return n.prototype.then=function(n,e){return this.done||this.input<this.begin?this:this.input>=this.begin+n?(this.begin+=n,this):(e(this.input-this.begin),this.done=!0,this)},n.prototype.over=function(n){return this.done||(n(this.input-this.begin),this.done=!0),this},n}();window.addEventListener("load",(function(n){var e=!1,i=document.createElement("style");i.innerText=t(9).default,document.head.appendChild(i),document.addEventListener("fullscreenchange",(function(){document.body.style.cursor=window.document.fullscreenElement?"none":"auto"}));var o=document.createElement("div");o.className="container",document.body.appendChild(o);var a=document.createElement("p");a.innerHTML="RESOLUTION: ",o.appendChild(a);var r=document.createElement("select");r.innerHTML='\n    <option value="0.25">LOW 25%</option>\n    <option value="0.5" selected>REGULAR 50%</option>\n    <option value="0.75">REGULAR 75%</option>\n    <option value="1.0">FULL 100%</option>\n    ',a.appendChild(r);var E=document.createElement("p");o.appendChild(E),E.innerHTML="CLICK TO START",E.className="button",E.onclick=function(){E.remove(),a.remove();var n=document.createElement("p");n.innerHTML='LOADING <div class="lds-facebook"><div></div><div></div><div></div></div>',o.appendChild(n);var t=document.createElement("p");t.innerHTML="It takes about one minute. Please wait.<br> 読み込みに1分程度かかります。しばらくお待ち下さい。",t.style.fontSize="50px",o.appendChild(t),document.body.requestFullscreen().then((function(){setTimeout((function(){_.onRender=function(n,t){!function(n,e,t){var i=140*n/60,o=new S(0,0,10),a=new S(0,0,0);new S(0,0,-10);_.uniformArray.forEach((function(n){_.uniforms[n.key]=n.initValue})),new m(i).then(48,(function(n){_.uniforms.gTonemapExposure=1,o=new S(.042533747248285514,3.580181344478862,-3.2355081018643443).add(S.fbm(n).scale(.01)),a=new S(.7576763789243015,3.4515422110479044,-.21633410393024527),_.uniforms.gCameraFov=37.88049605411499,_.uniforms.gMandelboxScale=2.88621239103946,_.uniforms.gCameraLightIntensity=0,_.uniforms.gEmissiveIntensity=0,_.uniforms.gSceneEps=.0007057137501171619})).over((function(n){_.uniforms.gBlend=-1})),_.uniforms.gCameraEyeX=o.x,_.uniforms.gCameraEyeY=o.y,_.uniforms.gCameraEyeZ=o.z,_.uniforms.gCameraTargetX=a.x,_.uniforms.gCameraTargetY=a.y,_.uniforms.gCameraTargetZ=a.z}(n),!e&&n>_.timeLength+2&&(document.exitFullscreen(),e=!0)},_.init(),o.remove();var n=function(){var n=parseFloat(r.value);_.setSize(window.innerWidth*n,window.innerHeight*n)};window.addEventListener("resize",n),n(),setTimeout((function(){_.play(),_.playSound()}),2500)}),1e3)}))}}),!1)}]);